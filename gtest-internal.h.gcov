        -:    0:Source:/usr/include/gtest/internal/gtest-internal.h
        -:    0:Programs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Authors: wan@google.com (Zhanyong Wan), eefacm@gmail.com (Sean Mcafee)
        -:   31://
        -:   32:// The Google C++ Testing Framework (Google Test)
        -:   33://
        -:   34:// This header file declares functions and macros used internally by
        -:   35:// Google Test.  They are subject to change without notice.
        -:   36:
        -:   37:#ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_
        -:   38:#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_
        -:   39:
        -:   40:#include "gtest/internal/gtest-port.h"
        -:   41:
        -:   42:#if GTEST_OS_LINUX
        -:   43:# include <stdlib.h>
        -:   44:# include <sys/types.h>
        -:   45:# include <sys/wait.h>
        -:   46:# include <unistd.h>
        -:   47:#endif  // GTEST_OS_LINUX
        -:   48:
        -:   49:#include <ctype.h>
        -:   50:#include <string.h>
        -:   51:#include <iomanip>
        -:   52:#include <limits>
        -:   53:#include <set>
        -:   54:
        -:   55:#include "gtest/internal/gtest-string.h"
        -:   56:#include "gtest/internal/gtest-filepath.h"
        -:   57:#include "gtest/internal/gtest-type-util.h"
        -:   58:
        -:   59:// Due to C++ preprocessor weirdness, we need double indirection to
        -:   60:// concatenate two tokens when one of them is __LINE__.  Writing
        -:   61://
        -:   62://   foo ## __LINE__
        -:   63://
        -:   64:// will result in the token foo__LINE__, instead of foo followed by
        -:   65:// the current line number.  For more details, see
        -:   66:// http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.6
        -:   67:#define GTEST_CONCAT_TOKEN_(foo, bar) GTEST_CONCAT_TOKEN_IMPL_(foo, bar)
        -:   68:#define GTEST_CONCAT_TOKEN_IMPL_(foo, bar) foo ## bar
        -:   69:
        -:   70:// Google Test defines the testing::Message class to allow construction of
        -:   71:// test messages via the << operator.  The idea is that anything
        -:   72:// streamable to std::ostream can be streamed to a testing::Message.
        -:   73:// This allows a user to use his own types in Google Test assertions by
        -:   74:// overloading the << operator.
        -:   75://
        -:   76:// util/gtl/stl_logging-inl.h overloads << for STL containers.  These
        -:   77:// overloads cannot be defined in the std namespace, as that will be
        -:   78:// undefined behavior.  Therefore, they are defined in the global
        -:   79:// namespace instead.
        -:   80://
        -:   81:// C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:   82:// overloads are visible in either the std namespace or the global
        -:   83:// namespace, but not other namespaces, including the testing
        -:   84:// namespace which Google Test's Message class is in.
        -:   85://
        -:   86:// To allow STL containers (and other types that has a << operator
        -:   87:// defined in the global namespace) to be used in Google Test assertions,
        -:   88:// testing::Message must access the custom << operator from the global
        -:   89:// namespace.  Hence this helper function.
        -:   90://
        -:   91:// Note: Jeffrey Yasskin suggested an alternative fix by "using
        -:   92:// ::operator<<;" in the definition of Message's operator<<.  That fix
        -:   93:// doesn't require a helper function, but unfortunately doesn't
        -:   94:// compile with MSVC.
        -:   95:template <typename T>
function _Z19GTestStreamToHelperIA5_cEvPSoRKT_ called 0 returned 0% blocks executed 0%
function _Z19GTestStreamToHelperIA7_cEvPSoRKT_ called 0 returned 0% blocks executed 0%
function _Z19GTestStreamToHelperIA12_cEvPSoRKT_ called 0 returned 0% blocks executed 0%
function _Z19GTestStreamToHelperIN7testing8internal6StringEEvPSoRKT_ called 0 returned 0% blocks executed 0%
function _Z19GTestStreamToHelperIPKcEvPSoRKT_ called 0 returned 0% blocks executed 0%
    #####:   96:inline void GTestStreamToHelper(std::ostream* os, const T& val) {
    #####:   97:  *os << val;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   98:}
        -:   99:
        -:  100:class ProtocolMessage;
        -:  101:namespace proto2 { class Message; }
        -:  102:
        -:  103:namespace testing {
        -:  104:
        -:  105:// Forward declarations.
        -:  106:
        -:  107:class AssertionResult;                 // Result of an assertion.
        -:  108:class Message;                         // Represents a failure message.
        -:  109:class Test;                            // Represents a test.
        -:  110:class TestInfo;                        // Information about a test.
        -:  111:class TestPartResult;                  // Result of a test part.
        -:  112:class UnitTest;                        // A collection of test cases.
        -:  113:
        -:  114:template <typename T>
        -:  115:::std::string PrintToString(const T& value);
        -:  116:
        -:  117:namespace internal {
        -:  118:
        -:  119:struct TraceInfo;                      // Information about a trace point.
        -:  120:class ScopedTrace;                     // Implements scoped trace.
        -:  121:class TestInfoImpl;                    // Opaque implementation of TestInfo
        -:  122:class UnitTestImpl;                    // Opaque implementation of UnitTest
        -:  123:
        -:  124:// How many times InitGoogleTest() has been called.
        -:  125:extern int g_init_gtest_count;
        -:  126:
        -:  127:// The text used in failure messages to indicate the start of the
        -:  128:// stack trace.
        -:  129:GTEST_API_ extern const char kStackTraceMarker[];
        -:  130:
        -:  131:// A secret type that Google Test users don't know about.  It has no
        -:  132:// definition on purpose.  Therefore it's impossible to create a
        -:  133:// Secret object, which is what we want.
        -:  134:class Secret;
        -:  135:
        -:  136:// Two overloaded helpers for checking at compile time whether an
        -:  137:// expression is a null pointer literal (i.e. NULL or any 0-valued
        -:  138:// compile-time integral constant).  Their return values have
        -:  139:// different sizes, so we can use sizeof() to test which version is
        -:  140:// picked by the compiler.  These helpers have no implementations, as
        -:  141:// we only need their signatures.
        -:  142://
        -:  143:// Given IsNullLiteralHelper(x), the compiler will pick the first
        -:  144:// version if x can be implicitly converted to Secret*, and pick the
        -:  145:// second version otherwise.  Since Secret is a secret and incomplete
        -:  146:// type, the only expression a user can write that has type Secret* is
        -:  147:// a null pointer literal.  Therefore, we know that x is a null
        -:  148:// pointer literal if and only if the first version is picked by the
        -:  149:// compiler.
        -:  150:char IsNullLiteralHelper(Secret* p);
        -:  151:char (&IsNullLiteralHelper(...))[2];  // NOLINT
        -:  152:
        -:  153:// A compile-time bool constant that is true if and only if x is a
        -:  154:// null pointer literal (i.e. NULL or any 0-valued compile-time
        -:  155:// integral constant).
        -:  156:#ifdef GTEST_ELLIPSIS_NEEDS_POD_
        -:  157:// We lose support for NULL detection where the compiler doesn't like
        -:  158:// passing non-POD classes through ellipsis (...).
        -:  159:# define GTEST_IS_NULL_LITERAL_(x) false
        -:  160:#else
        -:  161:# define GTEST_IS_NULL_LITERAL_(x) \
        -:  162:    (sizeof(::testing::internal::IsNullLiteralHelper(x)) == 1)
        -:  163:#endif  // GTEST_ELLIPSIS_NEEDS_POD_
        -:  164:
        -:  165:// Appends the user-supplied message to the Google-Test-generated message.
        -:  166:GTEST_API_ String AppendUserMessage(const String& gtest_msg,
        -:  167:                                    const Message& user_msg);
        -:  168:
        -:  169:// A helper class for creating scoped traces in user programs.
        -:  170:class GTEST_API_ ScopedTrace {
        -:  171: public:
        -:  172:  // The c'tor pushes the given source file location and message onto
        -:  173:  // a trace stack maintained by Google Test.
        -:  174:  ScopedTrace(const char* file, int line, const Message& message);
        -:  175:
        -:  176:  // The d'tor pops the info pushed by the c'tor.
        -:  177:  //
        -:  178:  // Note that the d'tor is not virtual in order to be efficient.
        -:  179:  // Don't inherit from ScopedTrace!
        -:  180:  ~ScopedTrace();
        -:  181:
        -:  182: private:
        -:  183:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedTrace);
        -:  184:} GTEST_ATTRIBUTE_UNUSED_;  // A ScopedTrace object does its job in its
        -:  185:                            // c'tor and d'tor.  Therefore it doesn't
        -:  186:                            // need to be used otherwise.
        -:  187:
        -:  188:// Converts a streamable value to a String.  A NULL pointer is
        -:  189:// converted to "(null)".  When the input value is a ::string,
        -:  190:// ::std::string, ::wstring, or ::std::wstring object, each NUL
        -:  191:// character in it is replaced with "\\0".
        -:  192:// Declared here but defined in gtest.h, so that it has access
        -:  193:// to the definition of the Message class, required by the ARM
        -:  194:// compiler.
        -:  195:template <typename T>
        -:  196:String StreamableToString(const T& streamable);
        -:  197:
        -:  198:// The Symbian compiler has a bug that prevents it from selecting the
        -:  199:// correct overload of FormatForComparisonFailureMessage (see below)
        -:  200:// unless we pass the first argument by reference.  If we do that,
        -:  201:// however, Visual Age C++ 10.1 generates a compiler error.  Therefore
        -:  202:// we only apply the work-around for Symbian.
        -:  203:#if defined(__SYMBIAN32__)
        -:  204:# define GTEST_CREF_WORKAROUND_ const&
        -:  205:#else
        -:  206:# define GTEST_CREF_WORKAROUND_
        -:  207:#endif
        -:  208:
        -:  209:// When this operand is a const char* or char*, if the other operand
        -:  210:// is a ::std::string or ::string, we print this operand as a C string
        -:  211:// rather than a pointer (we do the same for wide strings); otherwise
        -:  212:// we print it as a pointer to be safe.
        -:  213:
        -:  214:// This internal macro is used to avoid duplicated code.
        -:  215:#define GTEST_FORMAT_IMPL_(operand2_type, operand1_printer)\
        -:  216:inline String FormatForComparisonFailureMessage(\
        -:  217:    operand2_type::value_type* GTEST_CREF_WORKAROUND_ str, \
        -:  218:    const operand2_type& /*operand2*/) {\
        -:  219:  return operand1_printer(str);\
        -:  220:}\
        -:  221:inline String FormatForComparisonFailureMessage(\
        -:  222:    const operand2_type::value_type* GTEST_CREF_WORKAROUND_ str, \
        -:  223:    const operand2_type& /*operand2*/) {\
        -:  224:  return operand1_printer(str);\
        -:  225:}
        -:  226:
        -:  227:GTEST_FORMAT_IMPL_(::std::string, String::ShowCStringQuoted)
        -:  228:#if GTEST_HAS_STD_WSTRING
        -:  229:GTEST_FORMAT_IMPL_(::std::wstring, String::ShowWideCStringQuoted)
        -:  230:#endif  // GTEST_HAS_STD_WSTRING
        -:  231:
        -:  232:#if GTEST_HAS_GLOBAL_STRING
        -:  233:GTEST_FORMAT_IMPL_(::string, String::ShowCStringQuoted)
        -:  234:#endif  // GTEST_HAS_GLOBAL_STRING
        -:  235:#if GTEST_HAS_GLOBAL_WSTRING
        -:  236:GTEST_FORMAT_IMPL_(::wstring, String::ShowWideCStringQuoted)
        -:  237:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  238:
        -:  239:#undef GTEST_FORMAT_IMPL_
        -:  240:
        -:  241:// The next four overloads handle the case where the operand being
        -:  242:// printed is a char/wchar_t pointer and the other operand is not a
        -:  243:// string/wstring object.  In such cases, we just print the operand as
        -:  244:// a pointer to be safe.
        -:  245:#define GTEST_FORMAT_CHAR_PTR_IMPL_(CharType)                       \
        -:  246:  template <typename T>                                             \
        -:  247:  String FormatForComparisonFailureMessage(CharType* GTEST_CREF_WORKAROUND_ p, \
        -:  248:                                           const T&) { \
        -:  249:    return PrintToString(static_cast<const void*>(p));              \
        -:  250:  }
        -:  251:
        -:  252:GTEST_FORMAT_CHAR_PTR_IMPL_(char)
        -:  253:GTEST_FORMAT_CHAR_PTR_IMPL_(const char)
        -:  254:GTEST_FORMAT_CHAR_PTR_IMPL_(wchar_t)
        -:  255:GTEST_FORMAT_CHAR_PTR_IMPL_(const wchar_t)
        -:  256:
        -:  257:#undef GTEST_FORMAT_CHAR_PTR_IMPL_
        -:  258:
        -:  259:// Constructs and returns the message for an equality assertion
        -:  260:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -:  261://
        -:  262:// The first four parameters are the expressions used in the assertion
        -:  263:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -:  264:// where foo is 5 and bar is 6, we have:
        -:  265://
        -:  266://   expected_expression: "foo"
        -:  267://   actual_expression:   "bar"
        -:  268://   expected_value:      "5"
        -:  269://   actual_value:        "6"
        -:  270://
        -:  271:// The ignoring_case parameter is true iff the assertion is a
        -:  272:// *_STRCASEEQ*.  When it's true, the string " (ignoring case)" will
        -:  273:// be inserted into the message.
        -:  274:GTEST_API_ AssertionResult EqFailure(const char* expected_expression,
        -:  275:                                     const char* actual_expression,
        -:  276:                                     const String& expected_value,
        -:  277:                                     const String& actual_value,
        -:  278:                                     bool ignoring_case);
        -:  279:
        -:  280:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
        -:  281:GTEST_API_ String GetBoolAssertionFailureMessage(
        -:  282:    const AssertionResult& assertion_result,
        -:  283:    const char* expression_text,
        -:  284:    const char* actual_predicate_value,
        -:  285:    const char* expected_predicate_value);
        -:  286:
        -:  287:// This template class represents an IEEE floating-point number
        -:  288:// (either single-precision or double-precision, depending on the
        -:  289:// template parameters).
        -:  290://
        -:  291:// The purpose of this class is to do more sophisticated number
        -:  292:// comparison.  (Due to round-off error, etc, it's very unlikely that
        -:  293:// two floating-points will be equal exactly.  Hence a naive
        -:  294:// comparison by the == operation often doesn't work.)
        -:  295://
        -:  296:// Format of IEEE floating-point:
        -:  297://
        -:  298://   The most-significant bit being the leftmost, an IEEE
        -:  299://   floating-point looks like
        -:  300://
        -:  301://     sign_bit exponent_bits fraction_bits
        -:  302://
        -:  303://   Here, sign_bit is a single bit that designates the sign of the
        -:  304://   number.
        -:  305://
        -:  306://   For float, there are 8 exponent bits and 23 fraction bits.
        -:  307://
        -:  308://   For double, there are 11 exponent bits and 52 fraction bits.
        -:  309://
        -:  310://   More details can be found at
        -:  311://   http://en.wikipedia.org/wiki/IEEE_floating-point_standard.
        -:  312://
        -:  313:// Template parameter:
        -:  314://
        -:  315://   RawType: the raw floating-point type (either float or double)
        -:  316:template <typename RawType>
        -:  317:class FloatingPoint {
        -:  318: public:
        -:  319:  // Defines the unsigned integer type that has the same size as the
        -:  320:  // floating point number.
        -:  321:  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;
        -:  322:
        -:  323:  // Constants.
        -:  324:
        -:  325:  // # of bits in a number.
        -:  326:  static const size_t kBitCount = 8*sizeof(RawType);
        -:  327:
        -:  328:  // # of fraction bits in a number.
        -:  329:  static const size_t kFractionBitCount =
        -:  330:    std::numeric_limits<RawType>::digits - 1;
        -:  331:
        -:  332:  // # of exponent bits in a number.
        -:  333:  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;
        -:  334:
        -:  335:  // The mask for the sign bit.
        -:  336:  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);
        -:  337:
        -:  338:  // The mask for the fraction bits.
        -:  339:  static const Bits kFractionBitMask =
        -:  340:    ~static_cast<Bits>(0) >> (kExponentBitCount + 1);
        -:  341:
        -:  342:  // The mask for the exponent bits.
        -:  343:  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);
        -:  344:
        -:  345:  // How many ULP's (Units in the Last Place) we want to tolerate when
        -:  346:  // comparing two numbers.  The larger the value, the more error we
        -:  347:  // allow.  A 0 value means that two numbers must be exactly the same
        -:  348:  // to be considered equal.
        -:  349:  //
        -:  350:  // The maximum error of a single floating-point operation is 0.5
        -:  351:  // units in the last place.  On Intel CPU's, all floating-point
        -:  352:  // calculations are done with 80-bit precision, while double has 64
        -:  353:  // bits.  Therefore, 4 should be enough for ordinary use.
        -:  354:  //
        -:  355:  // See the following article for more details on ULP:
        -:  356:  // http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm.
        -:  357:  static const size_t kMaxUlps = 4;
        -:  358:
        -:  359:  // Constructs a FloatingPoint from a raw floating-point number.
        -:  360:  //
        -:  361:  // On an Intel CPU, passing a non-normalized NAN (Not a Number)
        -:  362:  // around may change its bits, although the new value is guaranteed
        -:  363:  // to be also a NAN.  Therefore, don't expect this constructor to
        -:  364:  // preserve the bits in x when x is a NAN.
        -:  365:  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }
        -:  366:
        -:  367:  // Static methods
        -:  368:
        -:  369:  // Reinterprets a bit pattern as a floating-point number.
        -:  370:  //
        -:  371:  // This function is needed to test the AlmostEquals() method.
        -:  372:  static RawType ReinterpretBits(const Bits bits) {
        -:  373:    FloatingPoint fp(0);
        -:  374:    fp.u_.bits_ = bits;
        -:  375:    return fp.u_.value_;
        -:  376:  }
        -:  377:
        -:  378:  // Returns the floating-point number that represent positive infinity.
        -:  379:  static RawType Infinity() {
        -:  380:    return ReinterpretBits(kExponentBitMask);
        -:  381:  }
        -:  382:
        -:  383:  // Non-static methods
        -:  384:
        -:  385:  // Returns the bits that represents this number.
        -:  386:  const Bits &bits() const { return u_.bits_; }
        -:  387:
        -:  388:  // Returns the exponent bits of this number.
        -:  389:  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }
        -:  390:
        -:  391:  // Returns the fraction bits of this number.
        -:  392:  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }
        -:  393:
        -:  394:  // Returns the sign bit of this number.
        -:  395:  Bits sign_bit() const { return kSignBitMask & u_.bits_; }
        -:  396:
        -:  397:  // Returns true iff this is NAN (not a number).
        -:  398:  bool is_nan() const {
        -:  399:    // It's a NAN if the exponent bits are all ones and the fraction
        -:  400:    // bits are not entirely zeros.
        -:  401:    return (exponent_bits() == kExponentBitMask) && (fraction_bits() != 0);
        -:  402:  }
        -:  403:
        -:  404:  // Returns true iff this number is at most kMaxUlps ULP's away from
        -:  405:  // rhs.  In particular, this function:
        -:  406:  //
        -:  407:  //   - returns false if either number is (or both are) NAN.
        -:  408:  //   - treats really large numbers as almost equal to infinity.
        -:  409:  //   - thinks +0.0 and -0.0 are 0 DLP's apart.
        -:  410:  bool AlmostEquals(const FloatingPoint& rhs) const {
        -:  411:    // The IEEE standard says that any comparison operation involving
        -:  412:    // a NAN must return false.
        -:  413:    if (is_nan() || rhs.is_nan()) return false;
        -:  414:
        -:  415:    return DistanceBetweenSignAndMagnitudeNumbers(u_.bits_, rhs.u_.bits_)
        -:  416:        <= kMaxUlps;
        -:  417:  }
        -:  418:
        -:  419: private:
        -:  420:  // The data type used to store the actual floating-point number.
        -:  421:  union FloatingPointUnion {
        -:  422:    RawType value_;  // The raw floating-point number.
        -:  423:    Bits bits_;      // The bits that represent the number.
        -:  424:  };
        -:  425:
        -:  426:  // Converts an integer from the sign-and-magnitude representation to
        -:  427:  // the biased representation.  More precisely, let N be 2 to the
        -:  428:  // power of (kBitCount - 1), an integer x is represented by the
        -:  429:  // unsigned number x + N.
        -:  430:  //
        -:  431:  // For instance,
        -:  432:  //
        -:  433:  //   -N + 1 (the most negative number representable using
        -:  434:  //          sign-and-magnitude) is represented by 1;
        -:  435:  //   0      is represented by N; and
        -:  436:  //   N - 1  (the biggest number representable using
        -:  437:  //          sign-and-magnitude) is represented by 2N - 1.
        -:  438:  //
        -:  439:  // Read http://en.wikipedia.org/wiki/Signed_number_representations
        -:  440:  // for more details on signed number representations.
        -:  441:  static Bits SignAndMagnitudeToBiased(const Bits &sam) {
        -:  442:    if (kSignBitMask & sam) {
        -:  443:      // sam represents a negative number.
        -:  444:      return ~sam + 1;
        -:  445:    } else {
        -:  446:      // sam represents a positive number.
        -:  447:      return kSignBitMask | sam;
        -:  448:    }
        -:  449:  }
        -:  450:
        -:  451:  // Given two numbers in the sign-and-magnitude representation,
        -:  452:  // returns the distance between them as an unsigned number.
        -:  453:  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,
        -:  454:                                                     const Bits &sam2) {
        -:  455:    const Bits biased1 = SignAndMagnitudeToBiased(sam1);
        -:  456:    const Bits biased2 = SignAndMagnitudeToBiased(sam2);
        -:  457:    return (biased1 >= biased2) ? (biased1 - biased2) : (biased2 - biased1);
        -:  458:  }
        -:  459:
        -:  460:  FloatingPointUnion u_;
        -:  461:};
        -:  462:
        -:  463:// Typedefs the instances of the FloatingPoint template class that we
        -:  464:// care to use.
        -:  465:typedef FloatingPoint<float> Float;
        -:  466:typedef FloatingPoint<double> Double;
        -:  467:
        -:  468:// In order to catch the mistake of putting tests that use different
        -:  469:// test fixture classes in the same test case, we need to assign
        -:  470:// unique IDs to fixture classes and compare them.  The TypeId type is
        -:  471:// used to hold such IDs.  The user should treat TypeId as an opaque
        -:  472:// type: the only operation allowed on TypeId values is to compare
        -:  473:// them for equality using the == operator.
        -:  474:typedef const void* TypeId;
        -:  475:
        -:  476:template <typename T>
        -:  477:class TypeIdHelper {
        -:  478: public:
        -:  479:  // dummy_ must not have a const type.  Otherwise an overly eager
        -:  480:  // compiler (e.g. MSVC 7.1 & 8.0) may try to merge
        -:  481:  // TypeIdHelper<T>::dummy_ for different Ts as an "optimization".
        -:  482:  static bool dummy_;
        -:  483:};
        -:  484:
        -:  485:template <typename T>
        -:  486:bool TypeIdHelper<T>::dummy_ = false;
        -:  487:
        -:  488:// GetTypeId<T>() returns the ID of type T.  Different values will be
        -:  489:// returned for different types.  Calling the function twice with the
        -:  490:// same type argument is guaranteed to return the same ID.
        -:  491:template <typename T>
function _ZN7testing8internal9GetTypeIdI9TestGraphI5GraphEEEPKvv called 136 returned 100% blocks executed 100%
function _ZN7testing8internal9GetTypeIdI9TestGraphIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEEPKvv called 136 returned 100% blocks executed 100%
      272:  492:TypeId GetTypeId() {
        -:  493:  // The compiler is required to allocate a different
        -:  494:  // TypeIdHelper<T>::dummy_ variable for each T used to instantiate
        -:  495:  // the template.  Therefore, the address of dummy_ is guaranteed to
        -:  496:  // be unique.
      272:  497:  return &(TypeIdHelper<T>::dummy_);
        -:  498:}
        -:  499:
        -:  500:// Returns the type ID of ::testing::Test.  Always call this instead
        -:  501:// of GetTypeId< ::testing::Test>() to get the type ID of
        -:  502:// ::testing::Test, as the latter may give the wrong result due to a
        -:  503:// suspected linker bug when compiling Google Test as a Mac OS X
        -:  504:// framework.
        -:  505:GTEST_API_ TypeId GetTestTypeId();
        -:  506:
        -:  507:// Defines the abstract factory interface that creates instances
        -:  508:// of a Test object.
        -:  509:class TestFactoryBase {
        -:  510: public:
function _ZN7testing8internal15TestFactoryBaseD0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryBaseD2Ev called 0 returned 0% blocks executed 0%
    #####:  511:  virtual ~TestFactoryBase() {}
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  512:
        -:  513:  // Creates a test instance to run. The instance is both created and destroyed
        -:  514:  // within TestInfoImpl::Run()
        -:  515:  virtual Test* CreateTest() = 0;
        -:  516:
        -:  517: protected:
function _ZN7testing8internal15TestFactoryBaseC2Ev called 272 returned 100% blocks executed 100%
      272:  518:  TestFactoryBase() {}
        -:  519:
        -:  520: private:
        -:  521:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestFactoryBase);
        -:  522:};
        -:  523:
        -:  524:// This class provides implementation of TeastFactoryBase interface.
        -:  525:// It is used in TEST and TEST_F macros.
        -:  526:template <class TestClass>
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_4_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_4_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_4_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_4_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_1_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_1_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_2_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_2_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_3_TestI5GraphEED0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_3_TestI5GraphEED2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_4_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_3_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_2_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_1_TestI5GraphEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_4_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEEC2Ev called 4 returned 100% blocks executed 100%
      272:  527:class TestFactoryImpl : public TestFactoryBase {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
branch 57 never executed
branch 58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
branch 69 never executed
branch 70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
branch 75 never executed
branch 76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
branch 87 never executed
branch 88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
branch 93 never executed
branch 94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
branch 99 never executed
branch 100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
branch 105 never executed
branch 106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
branch 111 never executed
branch 112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
branch 117 never executed
branch 118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
branch 123 never executed
branch 124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
branch 129 never executed
branch 130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
branch 135 never executed
branch 136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
branch 141 never executed
branch 142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
branch 147 never executed
branch 148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
branch 153 never executed
branch 154 never executed
call   155 never executed
call   156 never executed
call   157 never executed
call   158 never executed
branch 159 never executed
branch 160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
branch 165 never executed
branch 166 never executed
call   167 never executed
call   168 never executed
call   169 never executed
call   170 never executed
branch 171 never executed
branch 172 never executed
call   173 never executed
call   174 never executed
call   175 never executed
call   176 never executed
branch 177 never executed
branch 178 never executed
call   179 never executed
call   180 never executed
call   181 never executed
call   182 never executed
branch 183 never executed
branch 184 never executed
call   185 never executed
call   186 never executed
call   187 never executed
call   188 never executed
branch 189 never executed
branch 190 never executed
call   191 never executed
call   192 never executed
call   193 never executed
call   194 never executed
branch 195 never executed
branch 196 never executed
call   197 never executed
call   198 never executed
call   199 never executed
call   200 never executed
branch 201 never executed
branch 202 never executed
call   203 never executed
call   204 never executed
call   205 never executed
call   206 never executed
branch 207 never executed
branch 208 never executed
call   209 never executed
call   210 never executed
call   211 never executed
call   212 never executed
branch 213 never executed
branch 214 never executed
call   215 never executed
call   216 never executed
call   217 never executed
call   218 never executed
branch 219 never executed
branch 220 never executed
call   221 never executed
call   222 never executed
call   223 never executed
call   224 never executed
branch 225 never executed
branch 226 never executed
call   227 never executed
call   228 never executed
call   229 never executed
call   230 never executed
branch 231 never executed
branch 232 never executed
call   233 never executed
call   234 never executed
call   235 never executed
call   236 never executed
branch 237 never executed
branch 238 never executed
call   239 never executed
call   240 never executed
call   241 never executed
call   242 never executed
branch 243 never executed
branch 244 never executed
call   245 never executed
call   246 never executed
call   247 never executed
call   248 never executed
branch 249 never executed
branch 250 never executed
call   251 never executed
call   252 never executed
call   253 never executed
call   254 never executed
branch 255 never executed
branch 256 never executed
call   257 never executed
call   258 never executed
call   259 never executed
call   260 never executed
branch 261 never executed
branch 262 never executed
call   263 never executed
call   264 never executed
call   265 never executed
call   266 never executed
branch 267 never executed
branch 268 never executed
call   269 never executed
call   270 never executed
call   271 never executed
call   272 never executed
branch 273 never executed
branch 274 never executed
call   275 never executed
call   276 never executed
call   277 never executed
call   278 never executed
branch 279 never executed
branch 280 never executed
call   281 never executed
call   282 never executed
call   283 never executed
call   284 never executed
branch 285 never executed
branch 286 never executed
call   287 never executed
call   288 never executed
call   289 never executed
call   290 never executed
branch 291 never executed
branch 292 never executed
call   293 never executed
call   294 never executed
call   295 never executed
call   296 never executed
branch 297 never executed
branch 298 never executed
call   299 never executed
call   300 never executed
call   301 never executed
call   302 never executed
branch 303 never executed
branch 304 never executed
call   305 never executed
call   306 never executed
call   307 never executed
call   308 never executed
branch 309 never executed
branch 310 never executed
call   311 never executed
call   312 never executed
call   313 never executed
call   314 never executed
branch 315 never executed
branch 316 never executed
call   317 never executed
call   318 never executed
call   319 never executed
call   320 never executed
branch 321 never executed
branch 322 never executed
call   323 never executed
call   324 never executed
call   325 never executed
call   326 never executed
branch 327 never executed
branch 328 never executed
call   329 never executed
call   330 never executed
call   331 never executed
call   332 never executed
branch 333 never executed
branch 334 never executed
call   335 never executed
call   336 never executed
call   337 never executed
call   338 never executed
branch 339 never executed
branch 340 never executed
call   341 never executed
call   342 never executed
call   343 never executed
call   344 never executed
branch 345 never executed
branch 346 never executed
call   347 never executed
call   348 never executed
call   349 never executed
call   350 never executed
branch 351 never executed
branch 352 never executed
call   353 never executed
call   354 never executed
call   355 never executed
call   356 never executed
branch 357 never executed
branch 358 never executed
call   359 never executed
call   360 never executed
call   361 never executed
call   362 never executed
branch 363 never executed
branch 364 never executed
call   365 never executed
call   366 never executed
call   367 never executed
call   368 never executed
branch 369 never executed
branch 370 never executed
call   371 never executed
call   372 never executed
call   373 never executed
call   374 never executed
branch 375 never executed
branch 376 never executed
call   377 never executed
call   378 never executed
call   379 never executed
call   380 never executed
branch 381 never executed
branch 382 never executed
call   383 never executed
call   384 never executed
call   385 never executed
call   386 never executed
branch 387 never executed
branch 388 never executed
call   389 never executed
call   390 never executed
call   391 never executed
call   392 never executed
branch 393 never executed
branch 394 never executed
call   395 never executed
call   396 never executed
call   397 never executed
call   398 never executed
branch 399 never executed
branch 400 never executed
call   401 never executed
call   402 never executed
call   403 never executed
call   404 never executed
branch 405 never executed
branch 406 never executed
call   407 never executed
call   408 returned 100%
call   409 returned 100%
call   410 returned 100%
call   411 returned 100%
call   412 returned 100%
call   413 returned 100%
call   414 returned 100%
call   415 returned 100%
call   416 returned 100%
call   417 returned 100%
call   418 returned 100%
call   419 returned 100%
call   420 returned 100%
call   421 returned 100%
call   422 returned 100%
call   423 returned 100%
call   424 returned 100%
call   425 returned 100%
call   426 returned 100%
call   427 returned 100%
call   428 returned 100%
call   429 returned 100%
call   430 returned 100%
call   431 returned 100%
call   432 returned 100%
call   433 returned 100%
call   434 returned 100%
call   435 returned 100%
call   436 returned 100%
call   437 returned 100%
call   438 returned 100%
call   439 returned 100%
call   440 returned 100%
call   441 returned 100%
call   442 returned 100%
call   443 returned 100%
call   444 returned 100%
call   445 returned 100%
call   446 returned 100%
call   447 returned 100%
call   448 returned 100%
call   449 returned 100%
call   450 returned 100%
call   451 returned 100%
call   452 returned 100%
call   453 returned 100%
call   454 returned 100%
call   455 returned 100%
call   456 returned 100%
call   457 returned 100%
call   458 returned 100%
call   459 returned 100%
call   460 returned 100%
call   461 returned 100%
call   462 returned 100%
call   463 returned 100%
call   464 returned 100%
call   465 returned 100%
call   466 returned 100%
call   467 returned 100%
call   468 returned 100%
call   469 returned 100%
call   470 returned 100%
call   471 returned 100%
call   472 returned 100%
call   473 returned 100%
call   474 returned 100%
call   475 returned 100%
        -:  528: public:
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_4_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_1_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_2_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_3_TestIN5boost14adjacency_listINS3_4setSENS3_4vecSENS3_9directedSENS3_11no_propertyES8_S8_NS3_5listSEEEEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI27TestGraph_Add_Vertex_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI29TestGraph_Num_Vertices_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Add_Edge_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI26TestGraph_Num_Edges_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI34TestGraph_Adjacent_Vertices_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI21TestGraph_Edge_4_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI22TestGraph_Edges_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Source_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Target_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI23TestGraph_Vertex_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_1_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_2_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
function _ZN7testing8internal15TestFactoryImplI25TestGraph_Vertices_3_TestI5GraphEE10CreateTestEv called 4 returned 100% blocks executed 67%
      272:  529:  virtual Test* CreateTest() { return new TestClass; }
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
call   16 never executed
call   17 never executed
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
call   21 returned 100%
call   22 never executed
call   23 never executed
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0% (throw)
call   27 returned 100%
call   28 never executed
call   29 never executed
call   30 returned 100%
branch 31 taken 100% (fallthrough)
branch 32 taken 0% (throw)
call   33 returned 100%
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
call   40 never executed
call   41 never executed
call   42 returned 100%
branch 43 taken 100% (fallthrough)
branch 44 taken 0% (throw)
call   45 returned 100%
call   46 never executed
call   47 never executed
call   48 returned 100%
branch 49 taken 100% (fallthrough)
branch 50 taken 0% (throw)
call   51 returned 100%
call   52 never executed
call   53 never executed
call   54 returned 100%
branch 55 taken 100% (fallthrough)
branch 56 taken 0% (throw)
call   57 returned 100%
call   58 never executed
call   59 never executed
call   60 returned 100%
branch 61 taken 100% (fallthrough)
branch 62 taken 0% (throw)
call   63 returned 100%
call   64 never executed
call   65 never executed
call   66 returned 100%
branch 67 taken 100% (fallthrough)
branch 68 taken 0% (throw)
call   69 returned 100%
call   70 never executed
call   71 never executed
call   72 returned 100%
branch 73 taken 100% (fallthrough)
branch 74 taken 0% (throw)
call   75 returned 100%
call   76 never executed
call   77 never executed
call   78 returned 100%
branch 79 taken 100% (fallthrough)
branch 80 taken 0% (throw)
call   81 returned 100%
call   82 never executed
call   83 never executed
call   84 returned 100%
branch 85 taken 100% (fallthrough)
branch 86 taken 0% (throw)
call   87 returned 100%
call   88 never executed
call   89 never executed
call   90 returned 100%
branch 91 taken 100% (fallthrough)
branch 92 taken 0% (throw)
call   93 returned 100%
call   94 never executed
call   95 never executed
call   96 returned 100%
branch 97 taken 100% (fallthrough)
branch 98 taken 0% (throw)
call   99 returned 100%
call   100 never executed
call   101 never executed
call   102 returned 100%
branch 103 taken 100% (fallthrough)
branch 104 taken 0% (throw)
call   105 returned 100%
call   106 never executed
call   107 never executed
call   108 returned 100%
branch 109 taken 100% (fallthrough)
branch 110 taken 0% (throw)
call   111 returned 100%
call   112 never executed
call   113 never executed
call   114 returned 100%
branch 115 taken 100% (fallthrough)
branch 116 taken 0% (throw)
call   117 returned 100%
call   118 never executed
call   119 never executed
call   120 returned 100%
branch 121 taken 100% (fallthrough)
branch 122 taken 0% (throw)
call   123 returned 100%
call   124 never executed
call   125 never executed
call   126 returned 100%
branch 127 taken 100% (fallthrough)
branch 128 taken 0% (throw)
call   129 returned 100%
call   130 never executed
call   131 never executed
call   132 returned 100%
branch 133 taken 100% (fallthrough)
branch 134 taken 0% (throw)
call   135 returned 100%
call   136 never executed
call   137 never executed
call   138 returned 100%
branch 139 taken 100% (fallthrough)
branch 140 taken 0% (throw)
call   141 returned 100%
call   142 never executed
call   143 never executed
call   144 returned 100%
branch 145 taken 100% (fallthrough)
branch 146 taken 0% (throw)
call   147 returned 100%
call   148 never executed
call   149 never executed
call   150 returned 100%
branch 151 taken 100% (fallthrough)
branch 152 taken 0% (throw)
call   153 returned 100%
call   154 never executed
call   155 never executed
call   156 returned 100%
branch 157 taken 100% (fallthrough)
branch 158 taken 0% (throw)
call   159 returned 100%
call   160 never executed
call   161 never executed
call   162 returned 100%
branch 163 taken 100% (fallthrough)
branch 164 taken 0% (throw)
call   165 returned 100%
call   166 never executed
call   167 never executed
call   168 returned 100%
branch 169 taken 100% (fallthrough)
branch 170 taken 0% (throw)
call   171 returned 100%
call   172 never executed
call   173 never executed
call   174 returned 100%
branch 175 taken 100% (fallthrough)
branch 176 taken 0% (throw)
call   177 returned 100%
call   178 never executed
call   179 never executed
call   180 returned 100%
branch 181 taken 100% (fallthrough)
branch 182 taken 0% (throw)
call   183 returned 100%
call   184 never executed
call   185 never executed
call   186 returned 100%
branch 187 taken 100% (fallthrough)
branch 188 taken 0% (throw)
call   189 returned 100%
call   190 never executed
call   191 never executed
call   192 returned 100%
branch 193 taken 100% (fallthrough)
branch 194 taken 0% (throw)
call   195 returned 100%
call   196 never executed
call   197 never executed
call   198 returned 100%
branch 199 taken 100% (fallthrough)
branch 200 taken 0% (throw)
call   201 returned 100%
call   202 never executed
call   203 never executed
call   204 returned 100%
branch 205 taken 100% (fallthrough)
branch 206 taken 0% (throw)
call   207 returned 100%
call   208 never executed
call   209 never executed
call   210 returned 100%
branch 211 taken 100% (fallthrough)
branch 212 taken 0% (throw)
call   213 returned 100%
call   214 never executed
call   215 never executed
call   216 returned 100%
branch 217 taken 100% (fallthrough)
branch 218 taken 0% (throw)
call   219 returned 100%
call   220 never executed
call   221 never executed
call   222 returned 100%
branch 223 taken 100% (fallthrough)
branch 224 taken 0% (throw)
call   225 returned 100%
call   226 never executed
call   227 never executed
call   228 returned 100%
branch 229 taken 100% (fallthrough)
branch 230 taken 0% (throw)
call   231 returned 100%
call   232 never executed
call   233 never executed
call   234 returned 100%
branch 235 taken 100% (fallthrough)
branch 236 taken 0% (throw)
call   237 returned 100%
call   238 never executed
call   239 never executed
call   240 returned 100%
branch 241 taken 100% (fallthrough)
branch 242 taken 0% (throw)
call   243 returned 100%
call   244 never executed
call   245 never executed
call   246 returned 100%
branch 247 taken 100% (fallthrough)
branch 248 taken 0% (throw)
call   249 returned 100%
call   250 never executed
call   251 never executed
call   252 returned 100%
branch 253 taken 100% (fallthrough)
branch 254 taken 0% (throw)
call   255 returned 100%
call   256 never executed
call   257 never executed
call   258 returned 100%
branch 259 taken 100% (fallthrough)
branch 260 taken 0% (throw)
call   261 returned 100%
call   262 never executed
call   263 never executed
call   264 returned 100%
branch 265 taken 100% (fallthrough)
branch 266 taken 0% (throw)
call   267 returned 100%
call   268 never executed
call   269 never executed
call   270 returned 100%
branch 271 taken 100% (fallthrough)
branch 272 taken 0% (throw)
call   273 returned 100%
call   274 never executed
call   275 never executed
call   276 returned 100%
branch 277 taken 100% (fallthrough)
branch 278 taken 0% (throw)
call   279 returned 100%
call   280 never executed
call   281 never executed
call   282 returned 100%
branch 283 taken 100% (fallthrough)
branch 284 taken 0% (throw)
call   285 returned 100%
call   286 never executed
call   287 never executed
call   288 returned 100%
branch 289 taken 100% (fallthrough)
branch 290 taken 0% (throw)
call   291 returned 100%
call   292 never executed
call   293 never executed
call   294 returned 100%
branch 295 taken 100% (fallthrough)
branch 296 taken 0% (throw)
call   297 returned 100%
call   298 never executed
call   299 never executed
call   300 returned 100%
branch 301 taken 100% (fallthrough)
branch 302 taken 0% (throw)
call   303 returned 100%
call   304 never executed
call   305 never executed
call   306 returned 100%
branch 307 taken 100% (fallthrough)
branch 308 taken 0% (throw)
call   309 returned 100%
call   310 never executed
call   311 never executed
call   312 returned 100%
branch 313 taken 100% (fallthrough)
branch 314 taken 0% (throw)
call   315 returned 100%
call   316 never executed
call   317 never executed
call   318 returned 100%
branch 319 taken 100% (fallthrough)
branch 320 taken 0% (throw)
call   321 returned 100%
call   322 never executed
call   323 never executed
call   324 returned 100%
branch 325 taken 100% (fallthrough)
branch 326 taken 0% (throw)
call   327 returned 100%
call   328 never executed
call   329 never executed
call   330 returned 100%
branch 331 taken 100% (fallthrough)
branch 332 taken 0% (throw)
call   333 returned 100%
call   334 never executed
call   335 never executed
call   336 returned 100%
branch 337 taken 100% (fallthrough)
branch 338 taken 0% (throw)
call   339 returned 100%
call   340 never executed
call   341 never executed
call   342 returned 100%
branch 343 taken 100% (fallthrough)
branch 344 taken 0% (throw)
call   345 returned 100%
call   346 never executed
call   347 never executed
call   348 returned 100%
branch 349 taken 100% (fallthrough)
branch 350 taken 0% (throw)
call   351 returned 100%
call   352 never executed
call   353 never executed
call   354 returned 100%
branch 355 taken 100% (fallthrough)
branch 356 taken 0% (throw)
call   357 returned 100%
call   358 never executed
call   359 never executed
call   360 returned 100%
branch 361 taken 100% (fallthrough)
branch 362 taken 0% (throw)
call   363 returned 100%
call   364 never executed
call   365 never executed
call   366 returned 100%
branch 367 taken 100% (fallthrough)
branch 368 taken 0% (throw)
call   369 returned 100%
call   370 never executed
call   371 never executed
call   372 returned 100%
branch 373 taken 100% (fallthrough)
branch 374 taken 0% (throw)
call   375 returned 100%
call   376 never executed
call   377 never executed
call   378 returned 100%
branch 379 taken 100% (fallthrough)
branch 380 taken 0% (throw)
call   381 returned 100%
call   382 never executed
call   383 never executed
call   384 returned 100%
branch 385 taken 100% (fallthrough)
branch 386 taken 0% (throw)
call   387 returned 100%
call   388 never executed
call   389 never executed
call   390 returned 100%
branch 391 taken 100% (fallthrough)
branch 392 taken 0% (throw)
call   393 returned 100%
call   394 never executed
call   395 never executed
call   396 returned 100%
branch 397 taken 100% (fallthrough)
branch 398 taken 0% (throw)
call   399 returned 100%
call   400 never executed
call   401 never executed
call   402 returned 100%
branch 403 taken 100% (fallthrough)
branch 404 taken 0% (throw)
call   405 returned 100%
call   406 never executed
call   407 never executed
        -:  530:};
        -:  531:
        -:  532:#if GTEST_OS_WINDOWS
        -:  533:
        -:  534:// Predicate-formatters for implementing the HRESULT checking macros
        -:  535:// {ASSERT|EXPECT}_HRESULT_{SUCCEEDED|FAILED}
        -:  536:// We pass a long instead of HRESULT to avoid causing an
        -:  537:// include dependency for the HRESULT type.
        -:  538:GTEST_API_ AssertionResult IsHRESULTSuccess(const char* expr,
        -:  539:                                            long hr);  // NOLINT
        -:  540:GTEST_API_ AssertionResult IsHRESULTFailure(const char* expr,
        -:  541:                                            long hr);  // NOLINT
        -:  542:
        -:  543:#endif  // GTEST_OS_WINDOWS
        -:  544:
        -:  545:// Types of SetUpTestCase() and TearDownTestCase() functions.
        -:  546:typedef void (*SetUpTestCaseFunc)();
        -:  547:typedef void (*TearDownTestCaseFunc)();
        -:  548:
        -:  549:// Creates a new TestInfo object and registers it with Google Test;
        -:  550:// returns the created object.
        -:  551://
        -:  552:// Arguments:
        -:  553://
        -:  554://   test_case_name:   name of the test case
        -:  555://   name:             name of the test
        -:  556://   type_param        the name of the test's type parameter, or NULL if
        -:  557://                     this is not  a typed or a type-parameterized test.
        -:  558://   value_param       text representation of the test's value parameter,
        -:  559://                     or NULL if this is not a type-parameterized test.
        -:  560://   fixture_class_id: ID of the test fixture class
        -:  561://   set_up_tc:        pointer to the function that sets up the test case
        -:  562://   tear_down_tc:     pointer to the function that tears down the test case
        -:  563://   factory:          pointer to the factory that creates a test object.
        -:  564://                     The newly created TestInfo instance will assume
        -:  565://                     ownership of the factory object.
        -:  566:GTEST_API_ TestInfo* MakeAndRegisterTestInfo(
        -:  567:    const char* test_case_name, const char* name,
        -:  568:    const char* type_param,
        -:  569:    const char* value_param,
        -:  570:    TypeId fixture_class_id,
        -:  571:    SetUpTestCaseFunc set_up_tc,
        -:  572:    TearDownTestCaseFunc tear_down_tc,
        -:  573:    TestFactoryBase* factory);
        -:  574:
        -:  575:// If *pstr starts with the given prefix, modifies *pstr to be right
        -:  576:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -:  577:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
        -:  578:GTEST_API_ bool SkipPrefix(const char* prefix, const char** pstr);
        -:  579:
        -:  580:#if GTEST_HAS_TYPED_TEST || GTEST_HAS_TYPED_TEST_P
        -:  581:
        -:  582:// State of the definition of a type-parameterized test case.
        -:  583:class GTEST_API_ TypedTestCasePState {
        -:  584: public:
        -:  585:  TypedTestCasePState() : registered_(false) {}
        -:  586:
        -:  587:  // Adds the given test name to defined_test_names_ and return true
        -:  588:  // if the test case hasn't been registered; otherwise aborts the
        -:  589:  // program.
        -:  590:  bool AddTestName(const char* file, int line, const char* case_name,
        -:  591:                   const char* test_name) {
        -:  592:    if (registered_) {
        -:  593:      fprintf(stderr, "%s Test %s must be defined before "
        -:  594:              "REGISTER_TYPED_TEST_CASE_P(%s, ...).\n",
        -:  595:              FormatFileLocation(file, line).c_str(), test_name, case_name);
        -:  596:      fflush(stderr);
        -:  597:      posix::Abort();
        -:  598:    }
        -:  599:    defined_test_names_.insert(test_name);
        -:  600:    return true;
        -:  601:  }
        -:  602:
        -:  603:  // Verifies that registered_tests match the test names in
        -:  604:  // defined_test_names_; returns registered_tests if successful, or
        -:  605:  // aborts the program otherwise.
        -:  606:  const char* VerifyRegisteredTestNames(
        -:  607:      const char* file, int line, const char* registered_tests);
        -:  608:
        -:  609: private:
        -:  610:  bool registered_;
        -:  611:  ::std::set<const char*> defined_test_names_;
        -:  612:};
        -:  613:
        -:  614:// Skips to the first non-space char after the first comma in 'str';
        -:  615:// returns NULL if no comma is found in 'str'.
        -:  616:inline const char* SkipComma(const char* str) {
        -:  617:  const char* comma = strchr(str, ',');
        -:  618:  if (comma == NULL) {
        -:  619:    return NULL;
        -:  620:  }
        -:  621:  while (IsSpace(*(++comma))) {}
        -:  622:  return comma;
        -:  623:}
        -:  624:
        -:  625:// Returns the prefix of 'str' before the first comma in it; returns
        -:  626:// the entire string if it contains no comma.
function _ZN7testing8internal19GetPrefixUntilCommaEPKc called 272 returned 100% blocks executed 83%
      272:  627:inline String GetPrefixUntilComma(const char* str) {
      272:  628:  const char* comma = strchr(str, ',');
call    0 returned 100%
      272:  629:  return comma == NULL ? String(str) : String(str, comma - str);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        -:  630:}
        -:  631:
        -:  632:// TypeParameterizedTest<Fixture, TestSel, Types>::Register()
        -:  633:// registers a list of type-parameterized tests with Google Test.  The
        -:  634:// return value is insignificant - we just need to return something
        -:  635:// such that we can call this function in a namespace scope.
        -:  636://
        -:  637:// Implementation note: The GTEST_TEMPLATE_ macro declares a template
        -:  638:// template parameter.  It's defined in gtest-type-util.h.
        -:  639:template <GTEST_TEMPLATE_ Fixture, class TestSel, typename Types>
        -:  640:class TypeParameterizedTest {
        -:  641: public:
        -:  642:  // 'index' is the index of the test in the type list 'Types'
        -:  643:  // specified in INSTANTIATE_TYPED_TEST_CASE_P(Prefix, TestCase,
        -:  644:  // Types).  Valid values for 'index' are [0, N - 1] where N is the
        -:  645:  // length of Types.
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_4_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_3_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_2_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_1_TestEENS0_6Types1I5GraphEEE8RegisterEPKcSB_SB_i called 4 returned 100% blocks executed 71%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_4_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_3_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_2_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_1_TestEENS0_6Types2IN5boost14adjacency_listINS7_4setSENS7_4vecSENS7_9directedSENS7_11no_propertyESC_SC_NS7_5listSEEE5GraphEEE8RegisterEPKcSJ_SJ_i called 4 returned 100% blocks executed 72%
      272:  646:  static bool Register(const char* prefix, const char* case_name,
        -:  647:                       const char* test_names, int index) {
        -:  648:    typedef typename Types::Head Type;
        -:  649:    typedef Fixture<Type> FixtureClass;
        -:  650:    typedef typename GTEST_BIND_(TestSel, Type) TestClass;
        -:  651:
        -:  652:    // First, registers the first type-parameterized test in the type
        -:  653:    // list.
      272:  654:    MakeAndRegisterTestInfo(
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 returned 100%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
branch 55 taken 100% (fallthrough)
branch 56 taken 0% (throw)
call   57 returned 100%
call   58 returned 100%
branch 59 taken 100% (fallthrough)
branch 60 taken 0%
branch 61 taken 100% (fallthrough)
branch 62 taken 0% (throw)
call   63 returned 100%
call   64 returned 100%
branch 65 taken 100% (fallthrough)
branch 66 taken 0% (throw)
call   67 returned 100%
call   68 returned 100%
call   69 returned 100%
call   70 returned 100%
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 returned 100%
call   76 returned 100%
call   77 returned 100%
call   78 returned 100%
call   79 returned 100%
branch 80 taken 100% (fallthrough)
branch 81 taken 0% (throw)
call   82 returned 100%
call   83 returned 100%
branch 84 taken 100% (fallthrough)
branch 85 taken 0%
branch 86 taken 100% (fallthrough)
branch 87 taken 0% (throw)
call   88 returned 100%
call   89 returned 100%
branch 90 taken 100% (fallthrough)
branch 91 taken 0% (throw)
call   92 returned 100%
call   93 returned 100%
call   94 returned 100%
call   95 returned 100%
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 returned 100%
call   101 returned 100%
call   102 returned 100%
call   103 returned 100%
call   104 returned 100%
branch 105 taken 100% (fallthrough)
branch 106 taken 0% (throw)
call   107 returned 100%
call   108 returned 100%
branch 109 taken 100% (fallthrough)
branch 110 taken 0%
branch 111 taken 100% (fallthrough)
branch 112 taken 0% (throw)
call   113 returned 100%
call   114 returned 100%
branch 115 taken 100% (fallthrough)
branch 116 taken 0% (throw)
call   117 returned 100%
call   118 returned 100%
call   119 returned 100%
call   120 returned 100%
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 returned 100%
call   126 returned 100%
call   127 returned 100%
call   128 returned 100%
call   129 returned 100%
branch 130 taken 100% (fallthrough)
branch 131 taken 0% (throw)
call   132 returned 100%
call   133 returned 100%
branch 134 taken 100% (fallthrough)
branch 135 taken 0%
branch 136 taken 100% (fallthrough)
branch 137 taken 0% (throw)
call   138 returned 100%
call   139 returned 100%
branch 140 taken 100% (fallthrough)
branch 141 taken 0% (throw)
call   142 returned 100%
call   143 returned 100%
call   144 returned 100%
call   145 returned 100%
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 returned 100%
call   151 returned 100%
call   152 returned 100%
call   153 returned 100%
call   154 returned 100%
branch 155 taken 100% (fallthrough)
branch 156 taken 0% (throw)
call   157 returned 100%
call   158 returned 100%
branch 159 taken 100% (fallthrough)
branch 160 taken 0%
branch 161 taken 100% (fallthrough)
branch 162 taken 0% (throw)
call   163 returned 100%
call   164 returned 100%
branch 165 taken 100% (fallthrough)
branch 166 taken 0% (throw)
call   167 returned 100%
call   168 returned 100%
call   169 returned 100%
call   170 returned 100%
call   171 never executed
call   172 never executed
call   173 never executed
call   174 never executed
call   175 returned 100%
call   176 returned 100%
call   177 returned 100%
call   178 returned 100%
call   179 returned 100%
branch 180 taken 100% (fallthrough)
branch 181 taken 0% (throw)
call   182 returned 100%
call   183 returned 100%
branch 184 taken 100% (fallthrough)
branch 185 taken 0%
branch 186 taken 100% (fallthrough)
branch 187 taken 0% (throw)
call   188 returned 100%
call   189 returned 100%
branch 190 taken 100% (fallthrough)
branch 191 taken 0% (throw)
call   192 returned 100%
call   193 returned 100%
call   194 returned 100%
call   195 returned 100%
call   196 never executed
call   197 never executed
call   198 never executed
call   199 never executed
call   200 returned 100%
call   201 returned 100%
call   202 returned 100%
call   203 returned 100%
call   204 returned 100%
branch 205 taken 100% (fallthrough)
branch 206 taken 0% (throw)
call   207 returned 100%
call   208 returned 100%
branch 209 taken 100% (fallthrough)
branch 210 taken 0%
branch 211 taken 100% (fallthrough)
branch 212 taken 0% (throw)
call   213 returned 100%
call   214 returned 100%
branch 215 taken 100% (fallthrough)
branch 216 taken 0% (throw)
call   217 returned 100%
call   218 returned 100%
call   219 returned 100%
call   220 returned 100%
call   221 never executed
call   222 never executed
call   223 never executed
call   224 never executed
call   225 returned 100%
call   226 returned 100%
call   227 returned 100%
call   228 returned 100%
call   229 returned 100%
branch 230 taken 100% (fallthrough)
branch 231 taken 0% (throw)
call   232 returned 100%
call   233 returned 100%
branch 234 taken 100% (fallthrough)
branch 235 taken 0%
branch 236 taken 100% (fallthrough)
branch 237 taken 0% (throw)
call   238 returned 100%
call   239 returned 100%
branch 240 taken 100% (fallthrough)
branch 241 taken 0% (throw)
call   242 returned 100%
call   243 returned 100%
call   244 returned 100%
call   245 returned 100%
call   246 never executed
call   247 never executed
call   248 never executed
call   249 never executed
call   250 returned 100%
call   251 returned 100%
call   252 returned 100%
call   253 returned 100%
call   254 returned 100%
branch 255 taken 100% (fallthrough)
branch 256 taken 0% (throw)
call   257 returned 100%
call   258 returned 100%
branch 259 taken 100% (fallthrough)
branch 260 taken 0%
branch 261 taken 100% (fallthrough)
branch 262 taken 0% (throw)
call   263 returned 100%
call   264 returned 100%
branch 265 taken 100% (fallthrough)
branch 266 taken 0% (throw)
call   267 returned 100%
call   268 returned 100%
call   269 returned 100%
call   270 returned 100%
call   271 never executed
call   272 never executed
call   273 never executed
call   274 never executed
call   275 returned 100%
call   276 returned 100%
call   277 returned 100%
call   278 returned 100%
call   279 returned 100%
branch 280 taken 100% (fallthrough)
branch 281 taken 0% (throw)
call   282 returned 100%
call   283 returned 100%
branch 284 taken 100% (fallthrough)
branch 285 taken 0%
branch 286 taken 100% (fallthrough)
branch 287 taken 0% (throw)
call   288 returned 100%
call   289 returned 100%
branch 290 taken 100% (fallthrough)
branch 291 taken 0% (throw)
call   292 returned 100%
call   293 returned 100%
call   294 returned 100%
call   295 returned 100%
call   296 never executed
call   297 never executed
call   298 never executed
call   299 never executed
call   300 returned 100%
call   301 returned 100%
call   302 returned 100%
call   303 returned 100%
call   304 returned 100%
branch 305 taken 100% (fallthrough)
branch 306 taken 0% (throw)
call   307 returned 100%
call   308 returned 100%
branch 309 taken 100% (fallthrough)
branch 310 taken 0%
branch 311 taken 100% (fallthrough)
branch 312 taken 0% (throw)
call   313 returned 100%
call   314 returned 100%
branch 315 taken 100% (fallthrough)
branch 316 taken 0% (throw)
call   317 returned 100%
call   318 returned 100%
call   319 returned 100%
call   320 returned 100%
call   321 never executed
call   322 never executed
call   323 never executed
call   324 never executed
call   325 returned 100%
call   326 returned 100%
call   327 returned 100%
call   328 returned 100%
call   329 returned 100%
branch 330 taken 100% (fallthrough)
branch 331 taken 0% (throw)
call   332 returned 100%
call   333 returned 100%
branch 334 taken 100% (fallthrough)
branch 335 taken 0%
branch 336 taken 100% (fallthrough)
branch 337 taken 0% (throw)
call   338 returned 100%
call   339 returned 100%
branch 340 taken 100% (fallthrough)
branch 341 taken 0% (throw)
call   342 returned 100%
call   343 returned 100%
call   344 returned 100%
call   345 returned 100%
call   346 never executed
call   347 never executed
call   348 never executed
call   349 never executed
call   350 returned 100%
call   351 returned 100%
call   352 returned 100%
call   353 returned 100%
call   354 returned 100%
branch 355 taken 100% (fallthrough)
branch 356 taken 0% (throw)
call   357 returned 100%
call   358 returned 100%
branch 359 taken 100% (fallthrough)
branch 360 taken 0%
branch 361 taken 100% (fallthrough)
branch 362 taken 0% (throw)
call   363 returned 100%
call   364 returned 100%
branch 365 taken 100% (fallthrough)
branch 366 taken 0% (throw)
call   367 returned 100%
call   368 returned 100%
call   369 returned 100%
call   370 returned 100%
call   371 never executed
call   372 never executed
call   373 never executed
call   374 never executed
call   375 returned 100%
call   376 returned 100%
call   377 returned 100%
call   378 returned 100%
call   379 returned 100%
branch 380 taken 100% (fallthrough)
branch 381 taken 0% (throw)
call   382 returned 100%
call   383 returned 100%
branch 384 taken 100% (fallthrough)
branch 385 taken 0%
branch 386 taken 100% (fallthrough)
branch 387 taken 0% (throw)
call   388 returned 100%
call   389 returned 100%
branch 390 taken 100% (fallthrough)
branch 391 taken 0% (throw)
call   392 returned 100%
call   393 returned 100%
call   394 returned 100%
call   395 returned 100%
call   396 never executed
call   397 never executed
call   398 never executed
call   399 never executed
call   400 returned 100%
call   401 returned 100%
call   402 returned 100%
call   403 returned 100%
call   404 returned 100%
branch 405 taken 100% (fallthrough)
branch 406 taken 0% (throw)
call   407 returned 100%
call   408 returned 100%
branch 409 taken 100% (fallthrough)
branch 410 taken 0%
branch 411 taken 100% (fallthrough)
branch 412 taken 0% (throw)
call   413 returned 100%
call   414 returned 100%
branch 415 taken 100% (fallthrough)
branch 416 taken 0% (throw)
call   417 returned 100%
call   418 returned 100%
call   419 returned 100%
call   420 returned 100%
call   421 never executed
call   422 never executed
call   423 never executed
call   424 never executed
call   425 returned 100%
call   426 returned 100%
call   427 returned 100%
call   428 returned 100%
call   429 returned 100%
branch 430 taken 100% (fallthrough)
branch 431 taken 0% (throw)
call   432 returned 100%
call   433 returned 100%
branch 434 taken 100% (fallthrough)
branch 435 taken 0%
branch 436 taken 100% (fallthrough)
branch 437 taken 0% (throw)
call   438 returned 100%
call   439 returned 100%
branch 440 taken 100% (fallthrough)
branch 441 taken 0% (throw)
call   442 returned 100%
call   443 returned 100%
call   444 returned 100%
call   445 returned 100%
call   446 never executed
call   447 never executed
call   448 never executed
call   449 never executed
call   450 returned 100%
call   451 returned 100%
call   452 returned 100%
call   453 returned 100%
call   454 returned 100%
branch 455 taken 100% (fallthrough)
branch 456 taken 0% (throw)
call   457 returned 100%
call   458 returned 100%
branch 459 taken 100% (fallthrough)
branch 460 taken 0%
branch 461 taken 100% (fallthrough)
branch 462 taken 0% (throw)
call   463 returned 100%
call   464 returned 100%
branch 465 taken 100% (fallthrough)
branch 466 taken 0% (throw)
call   467 returned 100%
call   468 returned 100%
call   469 returned 100%
call   470 returned 100%
call   471 never executed
call   472 never executed
call   473 never executed
call   474 never executed
call   475 returned 100%
call   476 returned 100%
call   477 returned 100%
call   478 returned 100%
call   479 returned 100%
branch 480 taken 100% (fallthrough)
branch 481 taken 0% (throw)
call   482 returned 100%
call   483 returned 100%
branch 484 taken 100% (fallthrough)
branch 485 taken 0%
branch 486 taken 100% (fallthrough)
branch 487 taken 0% (throw)
call   488 returned 100%
call   489 returned 100%
branch 490 taken 100% (fallthrough)
branch 491 taken 0% (throw)
call   492 returned 100%
call   493 returned 100%
call   494 returned 100%
call   495 returned 100%
call   496 never executed
call   497 never executed
call   498 never executed
call   499 never executed
call   500 returned 100%
call   501 returned 100%
call   502 returned 100%
call   503 returned 100%
call   504 returned 100%
branch 505 taken 100% (fallthrough)
branch 506 taken 0% (throw)
call   507 returned 100%
call   508 returned 100%
branch 509 taken 100% (fallthrough)
branch 510 taken 0%
branch 511 taken 100% (fallthrough)
branch 512 taken 0% (throw)
call   513 returned 100%
call   514 returned 100%
branch 515 taken 100% (fallthrough)
branch 516 taken 0% (throw)
call   517 returned 100%
call   518 returned 100%
call   519 returned 100%
call   520 returned 100%
call   521 never executed
call   522 never executed
call   523 never executed
call   524 never executed
call   525 returned 100%
call   526 returned 100%
call   527 returned 100%
call   528 returned 100%
call   529 returned 100%
branch 530 taken 100% (fallthrough)
branch 531 taken 0% (throw)
call   532 returned 100%
call   533 returned 100%
branch 534 taken 100% (fallthrough)
branch 535 taken 0%
branch 536 taken 100% (fallthrough)
branch 537 taken 0% (throw)
call   538 returned 100%
call   539 returned 100%
branch 540 taken 100% (fallthrough)
branch 541 taken 0% (throw)
call   542 returned 100%
call   543 returned 100%
call   544 returned 100%
call   545 returned 100%
call   546 never executed
call   547 never executed
call   548 never executed
call   549 never executed
call   550 returned 100%
call   551 returned 100%
call   552 returned 100%
call   553 returned 100%
call   554 returned 100%
branch 555 taken 100% (fallthrough)
branch 556 taken 0% (throw)
call   557 returned 100%
call   558 returned 100%
branch 559 taken 100% (fallthrough)
branch 560 taken 0%
branch 561 taken 100% (fallthrough)
branch 562 taken 0% (throw)
call   563 returned 100%
call   564 returned 100%
branch 565 taken 100% (fallthrough)
branch 566 taken 0% (throw)
call   567 returned 100%
call   568 returned 100%
call   569 returned 100%
call   570 returned 100%
call   571 never executed
call   572 never executed
call   573 never executed
call   574 never executed
call   575 returned 100%
call   576 returned 100%
call   577 returned 100%
call   578 returned 100%
call   579 returned 100%
branch 580 taken 100% (fallthrough)
branch 581 taken 0% (throw)
call   582 returned 100%
call   583 returned 100%
branch 584 taken 100% (fallthrough)
branch 585 taken 0%
branch 586 taken 100% (fallthrough)
branch 587 taken 0% (throw)
call   588 returned 100%
call   589 returned 100%
branch 590 taken 100% (fallthrough)
branch 591 taken 0% (throw)
call   592 returned 100%
call   593 returned 100%
call   594 returned 100%
call   595 returned 100%
call   596 never executed
call   597 never executed
call   598 never executed
call   599 never executed
call   600 returned 100%
call   601 returned 100%
call   602 returned 100%
call   603 returned 100%
call   604 returned 100%
branch 605 taken 100% (fallthrough)
branch 606 taken 0% (throw)
call   607 returned 100%
call   608 returned 100%
branch 609 taken 100% (fallthrough)
branch 610 taken 0%
branch 611 taken 100% (fallthrough)
branch 612 taken 0% (throw)
call   613 returned 100%
call   614 returned 100%
branch 615 taken 100% (fallthrough)
branch 616 taken 0% (throw)
call   617 returned 100%
call   618 returned 100%
call   619 returned 100%
call   620 returned 100%
call   621 never executed
call   622 never executed
call   623 never executed
call   624 never executed
call   625 returned 100%
call   626 returned 100%
call   627 returned 100%
call   628 returned 100%
call   629 returned 100%
branch 630 taken 100% (fallthrough)
branch 631 taken 0% (throw)
call   632 returned 100%
call   633 returned 100%
branch 634 taken 100% (fallthrough)
branch 635 taken 0%
branch 636 taken 100% (fallthrough)
branch 637 taken 0% (throw)
call   638 returned 100%
call   639 returned 100%
branch 640 taken 100% (fallthrough)
branch 641 taken 0% (throw)
call   642 returned 100%
call   643 returned 100%
call   644 returned 100%
call   645 returned 100%
call   646 never executed
call   647 never executed
call   648 never executed
call   649 never executed
call   650 returned 100%
call   651 returned 100%
call   652 returned 100%
call   653 returned 100%
call   654 returned 100%
branch 655 taken 100% (fallthrough)
branch 656 taken 0% (throw)
call   657 returned 100%
call   658 returned 100%
branch 659 taken 100% (fallthrough)
branch 660 taken 0%
branch 661 taken 100% (fallthrough)
branch 662 taken 0% (throw)
call   663 returned 100%
call   664 returned 100%
branch 665 taken 100% (fallthrough)
branch 666 taken 0% (throw)
call   667 returned 100%
call   668 returned 100%
call   669 returned 100%
call   670 returned 100%
call   671 never executed
call   672 never executed
call   673 never executed
call   674 never executed
call   675 returned 100%
call   676 returned 100%
call   677 returned 100%
call   678 returned 100%
call   679 returned 100%
branch 680 taken 100% (fallthrough)
branch 681 taken 0% (throw)
call   682 returned 100%
call   683 returned 100%
branch 684 taken 100% (fallthrough)
branch 685 taken 0%
branch 686 taken 100% (fallthrough)
branch 687 taken 0% (throw)
call   688 returned 100%
call   689 returned 100%
branch 690 taken 100% (fallthrough)
branch 691 taken 0% (throw)
call   692 returned 100%
call   693 returned 100%
call   694 returned 100%
call   695 returned 100%
call   696 never executed
call   697 never executed
call   698 never executed
call   699 never executed
call   700 returned 100%
call   701 returned 100%
call   702 returned 100%
call   703 returned 100%
call   704 returned 100%
branch 705 taken 100% (fallthrough)
branch 706 taken 0% (throw)
call   707 returned 100%
call   708 returned 100%
branch 709 taken 100% (fallthrough)
branch 710 taken 0%
branch 711 taken 100% (fallthrough)
branch 712 taken 0% (throw)
call   713 returned 100%
call   714 returned 100%
branch 715 taken 100% (fallthrough)
branch 716 taken 0% (throw)
call   717 returned 100%
call   718 returned 100%
call   719 returned 100%
call   720 returned 100%
call   721 never executed
call   722 never executed
call   723 never executed
call   724 never executed
call   725 returned 100%
call   726 returned 100%
call   727 returned 100%
call   728 returned 100%
call   729 returned 100%
branch 730 taken 100% (fallthrough)
branch 731 taken 0% (throw)
call   732 returned 100%
call   733 returned 100%
branch 734 taken 100% (fallthrough)
branch 735 taken 0%
branch 736 taken 100% (fallthrough)
branch 737 taken 0% (throw)
call   738 returned 100%
call   739 returned 100%
branch 740 taken 100% (fallthrough)
branch 741 taken 0% (throw)
call   742 returned 100%
call   743 returned 100%
call   744 returned 100%
call   745 returned 100%
call   746 never executed
call   747 never executed
call   748 never executed
call   749 never executed
call   750 returned 100%
call   751 returned 100%
call   752 returned 100%
call   753 returned 100%
call   754 returned 100%
branch 755 taken 100% (fallthrough)
branch 756 taken 0% (throw)
call   757 returned 100%
call   758 returned 100%
branch 759 taken 100% (fallthrough)
branch 760 taken 0%
branch 761 taken 100% (fallthrough)
branch 762 taken 0% (throw)
call   763 returned 100%
call   764 returned 100%
branch 765 taken 100% (fallthrough)
branch 766 taken 0% (throw)
call   767 returned 100%
call   768 returned 100%
call   769 returned 100%
call   770 returned 100%
call   771 never executed
call   772 never executed
call   773 never executed
call   774 never executed
call   775 returned 100%
call   776 returned 100%
call   777 returned 100%
call   778 returned 100%
call   779 returned 100%
branch 780 taken 100% (fallthrough)
branch 781 taken 0% (throw)
call   782 returned 100%
call   783 returned 100%
branch 784 taken 100% (fallthrough)
branch 785 taken 0%
branch 786 taken 100% (fallthrough)
branch 787 taken 0% (throw)
call   788 returned 100%
call   789 returned 100%
branch 790 taken 100% (fallthrough)
branch 791 taken 0% (throw)
call   792 returned 100%
call   793 returned 100%
call   794 returned 100%
call   795 returned 100%
call   796 never executed
call   797 never executed
call   798 never executed
call   799 never executed
call   800 returned 100%
call   801 returned 100%
call   802 returned 100%
call   803 returned 100%
call   804 returned 100%
branch 805 taken 100% (fallthrough)
branch 806 taken 0% (throw)
call   807 returned 100%
call   808 returned 100%
branch 809 taken 100% (fallthrough)
branch 810 taken 0%
branch 811 taken 100% (fallthrough)
branch 812 taken 0% (throw)
call   813 returned 100%
call   814 returned 100%
branch 815 taken 100% (fallthrough)
branch 816 taken 0% (throw)
call   817 returned 100%
call   818 returned 100%
call   819 returned 100%
call   820 returned 100%
call   821 never executed
call   822 never executed
call   823 never executed
call   824 never executed
call   825 returned 100%
call   826 returned 100%
call   827 returned 100%
call   828 returned 100%
call   829 returned 100%
branch 830 taken 100% (fallthrough)
branch 831 taken 0% (throw)
call   832 returned 100%
call   833 returned 100%
branch 834 taken 100% (fallthrough)
branch 835 taken 0%
branch 836 taken 100% (fallthrough)
branch 837 taken 0% (throw)
call   838 returned 100%
call   839 returned 100%
branch 840 taken 100% (fallthrough)
branch 841 taken 0% (throw)
call   842 returned 100%
call   843 returned 100%
call   844 returned 100%
call   845 returned 100%
call   846 never executed
call   847 never executed
call   848 never executed
call   849 never executed
call   850 returned 100%
call   851 returned 100%
call   852 returned 100%
call   853 returned 100%
call   854 returned 100%
branch 855 taken 100% (fallthrough)
branch 856 taken 0% (throw)
call   857 returned 100%
call   858 returned 100%
branch 859 taken 100% (fallthrough)
branch 860 taken 0%
branch 861 taken 100% (fallthrough)
branch 862 taken 0% (throw)
call   863 returned 100%
call   864 returned 100%
branch 865 taken 100% (fallthrough)
branch 866 taken 0% (throw)
call   867 returned 100%
call   868 returned 100%
call   869 returned 100%
call   870 returned 100%
call   871 never executed
call   872 never executed
call   873 never executed
call   874 never executed
call   875 returned 100%
call   876 returned 100%
call   877 returned 100%
call   878 returned 100%
call   879 returned 100%
branch 880 taken 100% (fallthrough)
branch 881 taken 0% (throw)
call   882 returned 100%
call   883 returned 100%
branch 884 taken 100% (fallthrough)
branch 885 taken 0%
branch 886 taken 100% (fallthrough)
branch 887 taken 0% (throw)
call   888 returned 100%
call   889 returned 100%
branch 890 taken 100% (fallthrough)
branch 891 taken 0% (throw)
call   892 returned 100%
call   893 returned 100%
call   894 returned 100%
call   895 returned 100%
call   896 never executed
call   897 never executed
call   898 never executed
call   899 never executed
call   900 returned 100%
call   901 returned 100%
call   902 returned 100%
call   903 returned 100%
call   904 returned 100%
branch 905 taken 100% (fallthrough)
branch 906 taken 0% (throw)
call   907 returned 100%
call   908 returned 100%
branch 909 taken 100% (fallthrough)
branch 910 taken 0%
branch 911 taken 100% (fallthrough)
branch 912 taken 0% (throw)
call   913 returned 100%
call   914 returned 100%
branch 915 taken 100% (fallthrough)
branch 916 taken 0% (throw)
call   917 returned 100%
call   918 returned 100%
call   919 returned 100%
call   920 returned 100%
call   921 never executed
call   922 never executed
call   923 never executed
call   924 never executed
call   925 returned 100%
call   926 returned 100%
call   927 returned 100%
call   928 returned 100%
call   929 returned 100%
branch 930 taken 100% (fallthrough)
branch 931 taken 0% (throw)
call   932 returned 100%
call   933 returned 100%
branch 934 taken 100% (fallthrough)
branch 935 taken 0%
branch 936 taken 100% (fallthrough)
branch 937 taken 0% (throw)
call   938 returned 100%
call   939 returned 100%
branch 940 taken 100% (fallthrough)
branch 941 taken 0% (throw)
call   942 returned 100%
call   943 returned 100%
call   944 returned 100%
call   945 returned 100%
call   946 never executed
call   947 never executed
call   948 never executed
call   949 never executed
call   950 returned 100%
call   951 returned 100%
call   952 returned 100%
call   953 returned 100%
call   954 returned 100%
branch 955 taken 100% (fallthrough)
branch 956 taken 0% (throw)
call   957 returned 100%
call   958 returned 100%
branch 959 taken 100% (fallthrough)
branch 960 taken 0%
branch 961 taken 100% (fallthrough)
branch 962 taken 0% (throw)
call   963 returned 100%
call   964 returned 100%
branch 965 taken 100% (fallthrough)
branch 966 taken 0% (throw)
call   967 returned 100%
call   968 returned 100%
call   969 returned 100%
call   970 returned 100%
call   971 never executed
call   972 never executed
call   973 never executed
call   974 never executed
call   975 returned 100%
call   976 returned 100%
call   977 returned 100%
call   978 returned 100%
call   979 returned 100%
branch 980 taken 100% (fallthrough)
branch 981 taken 0% (throw)
call   982 returned 100%
call   983 returned 100%
branch 984 taken 100% (fallthrough)
branch 985 taken 0%
branch 986 taken 100% (fallthrough)
branch 987 taken 0% (throw)
call   988 returned 100%
call   989 returned 100%
branch 990 taken 100% (fallthrough)
branch 991 taken 0% (throw)
call   992 returned 100%
call   993 returned 100%
call   994 returned 100%
call   995 returned 100%
call   996 never executed
call   997 never executed
call   998 never executed
call   999 never executed
call   1000 returned 100%
call   1001 returned 100%
call   1002 returned 100%
call   1003 returned 100%
call   1004 returned 100%
branch 1005 taken 100% (fallthrough)
branch 1006 taken 0% (throw)
call   1007 returned 100%
call   1008 returned 100%
branch 1009 taken 100% (fallthrough)
branch 1010 taken 0%
branch 1011 taken 100% (fallthrough)
branch 1012 taken 0% (throw)
call   1013 returned 100%
call   1014 returned 100%
branch 1015 taken 100% (fallthrough)
branch 1016 taken 0% (throw)
call   1017 returned 100%
call   1018 returned 100%
call   1019 returned 100%
call   1020 returned 100%
call   1021 never executed
call   1022 never executed
call   1023 never executed
call   1024 never executed
call   1025 returned 100%
call   1026 returned 100%
call   1027 returned 100%
call   1028 returned 100%
call   1029 returned 100%
branch 1030 taken 100% (fallthrough)
branch 1031 taken 0% (throw)
call   1032 returned 100%
call   1033 returned 100%
branch 1034 taken 100% (fallthrough)
branch 1035 taken 0%
branch 1036 taken 100% (fallthrough)
branch 1037 taken 0% (throw)
call   1038 returned 100%
call   1039 returned 100%
branch 1040 taken 100% (fallthrough)
branch 1041 taken 0% (throw)
call   1042 returned 100%
call   1043 returned 100%
call   1044 returned 100%
call   1045 returned 100%
call   1046 never executed
call   1047 never executed
call   1048 never executed
call   1049 never executed
call   1050 returned 100%
call   1051 returned 100%
call   1052 returned 100%
call   1053 returned 100%
call   1054 returned 100%
branch 1055 taken 100% (fallthrough)
branch 1056 taken 0% (throw)
call   1057 returned 100%
call   1058 returned 100%
branch 1059 taken 100% (fallthrough)
branch 1060 taken 0%
branch 1061 taken 100% (fallthrough)
branch 1062 taken 0% (throw)
call   1063 returned 100%
call   1064 returned 100%
branch 1065 taken 100% (fallthrough)
branch 1066 taken 0% (throw)
call   1067 returned 100%
call   1068 returned 100%
call   1069 returned 100%
call   1070 returned 100%
call   1071 never executed
call   1072 never executed
call   1073 never executed
call   1074 never executed
call   1075 returned 100%
call   1076 returned 100%
call   1077 returned 100%
call   1078 returned 100%
call   1079 returned 100%
branch 1080 taken 100% (fallthrough)
branch 1081 taken 0% (throw)
call   1082 returned 100%
call   1083 returned 100%
branch 1084 taken 100% (fallthrough)
branch 1085 taken 0%
branch 1086 taken 100% (fallthrough)
branch 1087 taken 0% (throw)
call   1088 returned 100%
call   1089 returned 100%
branch 1090 taken 100% (fallthrough)
branch 1091 taken 0% (throw)
call   1092 returned 100%
call   1093 returned 100%
call   1094 returned 100%
call   1095 returned 100%
call   1096 never executed
call   1097 never executed
call   1098 never executed
call   1099 never executed
call   1100 returned 100%
call   1101 returned 100%
call   1102 returned 100%
call   1103 returned 100%
call   1104 returned 100%
branch 1105 taken 100% (fallthrough)
branch 1106 taken 0% (throw)
call   1107 returned 100%
call   1108 returned 100%
branch 1109 taken 100% (fallthrough)
branch 1110 taken 0%
branch 1111 taken 100% (fallthrough)
branch 1112 taken 0% (throw)
call   1113 returned 100%
call   1114 returned 100%
branch 1115 taken 100% (fallthrough)
branch 1116 taken 0% (throw)
call   1117 returned 100%
call   1118 returned 100%
call   1119 returned 100%
call   1120 returned 100%
call   1121 never executed
call   1122 never executed
call   1123 never executed
call   1124 never executed
call   1125 returned 100%
call   1126 returned 100%
call   1127 returned 100%
call   1128 returned 100%
call   1129 returned 100%
branch 1130 taken 100% (fallthrough)
branch 1131 taken 0% (throw)
call   1132 returned 100%
call   1133 returned 100%
branch 1134 taken 100% (fallthrough)
branch 1135 taken 0%
branch 1136 taken 100% (fallthrough)
branch 1137 taken 0% (throw)
call   1138 returned 100%
call   1139 returned 100%
branch 1140 taken 100% (fallthrough)
branch 1141 taken 0% (throw)
call   1142 returned 100%
call   1143 returned 100%
call   1144 returned 100%
call   1145 returned 100%
call   1146 never executed
call   1147 never executed
call   1148 never executed
call   1149 never executed
call   1150 returned 100%
call   1151 returned 100%
call   1152 returned 100%
call   1153 returned 100%
call   1154 returned 100%
branch 1155 taken 100% (fallthrough)
branch 1156 taken 0% (throw)
call   1157 returned 100%
call   1158 returned 100%
branch 1159 taken 100% (fallthrough)
branch 1160 taken 0%
branch 1161 taken 100% (fallthrough)
branch 1162 taken 0% (throw)
call   1163 returned 100%
call   1164 returned 100%
branch 1165 taken 100% (fallthrough)
branch 1166 taken 0% (throw)
call   1167 returned 100%
call   1168 returned 100%
call   1169 returned 100%
call   1170 returned 100%
call   1171 never executed
call   1172 never executed
call   1173 never executed
call   1174 never executed
call   1175 returned 100%
call   1176 returned 100%
call   1177 returned 100%
call   1178 returned 100%
call   1179 returned 100%
branch 1180 taken 100% (fallthrough)
branch 1181 taken 0% (throw)
call   1182 returned 100%
call   1183 returned 100%
branch 1184 taken 100% (fallthrough)
branch 1185 taken 0%
branch 1186 taken 100% (fallthrough)
branch 1187 taken 0% (throw)
call   1188 returned 100%
call   1189 returned 100%
branch 1190 taken 100% (fallthrough)
branch 1191 taken 0% (throw)
call   1192 returned 100%
call   1193 returned 100%
call   1194 returned 100%
call   1195 returned 100%
call   1196 never executed
call   1197 never executed
call   1198 never executed
call   1199 never executed
call   1200 returned 100%
call   1201 returned 100%
call   1202 returned 100%
call   1203 returned 100%
call   1204 returned 100%
branch 1205 taken 100% (fallthrough)
branch 1206 taken 0% (throw)
call   1207 returned 100%
call   1208 returned 100%
branch 1209 taken 100% (fallthrough)
branch 1210 taken 0%
branch 1211 taken 100% (fallthrough)
branch 1212 taken 0% (throw)
call   1213 returned 100%
call   1214 returned 100%
branch 1215 taken 100% (fallthrough)
branch 1216 taken 0% (throw)
call   1217 returned 100%
call   1218 returned 100%
call   1219 returned 100%
call   1220 returned 100%
call   1221 never executed
call   1222 never executed
call   1223 never executed
call   1224 never executed
call   1225 returned 100%
call   1226 returned 100%
call   1227 returned 100%
call   1228 returned 100%
call   1229 returned 100%
branch 1230 taken 100% (fallthrough)
branch 1231 taken 0% (throw)
call   1232 returned 100%
call   1233 returned 100%
branch 1234 taken 100% (fallthrough)
branch 1235 taken 0%
branch 1236 taken 100% (fallthrough)
branch 1237 taken 0% (throw)
call   1238 returned 100%
call   1239 returned 100%
branch 1240 taken 100% (fallthrough)
branch 1241 taken 0% (throw)
call   1242 returned 100%
call   1243 returned 100%
call   1244 returned 100%
call   1245 returned 100%
call   1246 never executed
call   1247 never executed
call   1248 never executed
call   1249 never executed
call   1250 returned 100%
call   1251 returned 100%
call   1252 returned 100%
call   1253 returned 100%
call   1254 returned 100%
branch 1255 taken 100% (fallthrough)
branch 1256 taken 0% (throw)
call   1257 returned 100%
call   1258 returned 100%
branch 1259 taken 100% (fallthrough)
branch 1260 taken 0%
branch 1261 taken 100% (fallthrough)
branch 1262 taken 0% (throw)
call   1263 returned 100%
call   1264 returned 100%
branch 1265 taken 100% (fallthrough)
branch 1266 taken 0% (throw)
call   1267 returned 100%
call   1268 returned 100%
call   1269 returned 100%
call   1270 returned 100%
call   1271 never executed
call   1272 never executed
call   1273 never executed
call   1274 never executed
call   1275 returned 100%
call   1276 returned 100%
call   1277 returned 100%
call   1278 returned 100%
call   1279 returned 100%
branch 1280 taken 100% (fallthrough)
branch 1281 taken 0% (throw)
call   1282 returned 100%
call   1283 returned 100%
branch 1284 taken 100% (fallthrough)
branch 1285 taken 0%
branch 1286 taken 100% (fallthrough)
branch 1287 taken 0% (throw)
call   1288 returned 100%
call   1289 returned 100%
branch 1290 taken 100% (fallthrough)
branch 1291 taken 0% (throw)
call   1292 returned 100%
call   1293 returned 100%
call   1294 returned 100%
call   1295 returned 100%
call   1296 never executed
call   1297 never executed
call   1298 never executed
call   1299 never executed
call   1300 returned 100%
call   1301 returned 100%
call   1302 returned 100%
call   1303 returned 100%
call   1304 returned 100%
branch 1305 taken 100% (fallthrough)
branch 1306 taken 0% (throw)
call   1307 returned 100%
call   1308 returned 100%
branch 1309 taken 100% (fallthrough)
branch 1310 taken 0%
branch 1311 taken 100% (fallthrough)
branch 1312 taken 0% (throw)
call   1313 returned 100%
call   1314 returned 100%
branch 1315 taken 100% (fallthrough)
branch 1316 taken 0% (throw)
call   1317 returned 100%
call   1318 returned 100%
call   1319 returned 100%
call   1320 returned 100%
call   1321 never executed
call   1322 never executed
call   1323 never executed
call   1324 never executed
call   1325 returned 100%
call   1326 returned 100%
call   1327 returned 100%
call   1328 returned 100%
call   1329 returned 100%
branch 1330 taken 100% (fallthrough)
branch 1331 taken 0% (throw)
call   1332 returned 100%
call   1333 returned 100%
branch 1334 taken 100% (fallthrough)
branch 1335 taken 0%
branch 1336 taken 100% (fallthrough)
branch 1337 taken 0% (throw)
call   1338 returned 100%
call   1339 returned 100%
branch 1340 taken 100% (fallthrough)
branch 1341 taken 0% (throw)
call   1342 returned 100%
call   1343 returned 100%
call   1344 returned 100%
call   1345 returned 100%
call   1346 never executed
call   1347 never executed
call   1348 never executed
call   1349 never executed
call   1350 returned 100%
call   1351 returned 100%
call   1352 returned 100%
call   1353 returned 100%
call   1354 returned 100%
branch 1355 taken 100% (fallthrough)
branch 1356 taken 0% (throw)
call   1357 returned 100%
call   1358 returned 100%
branch 1359 taken 100% (fallthrough)
branch 1360 taken 0%
branch 1361 taken 100% (fallthrough)
branch 1362 taken 0% (throw)
call   1363 returned 100%
call   1364 returned 100%
branch 1365 taken 100% (fallthrough)
branch 1366 taken 0% (throw)
call   1367 returned 100%
call   1368 returned 100%
call   1369 returned 100%
call   1370 returned 100%
call   1371 never executed
call   1372 never executed
call   1373 never executed
call   1374 never executed
call   1375 returned 100%
call   1376 returned 100%
call   1377 returned 100%
call   1378 returned 100%
call   1379 returned 100%
branch 1380 taken 100% (fallthrough)
branch 1381 taken 0% (throw)
call   1382 returned 100%
call   1383 returned 100%
branch 1384 taken 100% (fallthrough)
branch 1385 taken 0%
branch 1386 taken 100% (fallthrough)
branch 1387 taken 0% (throw)
call   1388 returned 100%
call   1389 returned 100%
branch 1390 taken 100% (fallthrough)
branch 1391 taken 0% (throw)
call   1392 returned 100%
call   1393 returned 100%
call   1394 returned 100%
call   1395 returned 100%
call   1396 never executed
call   1397 never executed
call   1398 never executed
call   1399 never executed
call   1400 returned 100%
call   1401 returned 100%
call   1402 returned 100%
call   1403 returned 100%
call   1404 returned 100%
branch 1405 taken 100% (fallthrough)
branch 1406 taken 0% (throw)
call   1407 returned 100%
call   1408 returned 100%
branch 1409 taken 100% (fallthrough)
branch 1410 taken 0%
branch 1411 taken 100% (fallthrough)
branch 1412 taken 0% (throw)
call   1413 returned 100%
call   1414 returned 100%
branch 1415 taken 100% (fallthrough)
branch 1416 taken 0% (throw)
call   1417 returned 100%
call   1418 returned 100%
call   1419 returned 100%
call   1420 returned 100%
call   1421 never executed
call   1422 never executed
call   1423 never executed
call   1424 never executed
call   1425 returned 100%
call   1426 returned 100%
call   1427 returned 100%
call   1428 returned 100%
call   1429 returned 100%
branch 1430 taken 100% (fallthrough)
branch 1431 taken 0% (throw)
call   1432 returned 100%
call   1433 returned 100%
branch 1434 taken 100% (fallthrough)
branch 1435 taken 0%
branch 1436 taken 100% (fallthrough)
branch 1437 taken 0% (throw)
call   1438 returned 100%
call   1439 returned 100%
branch 1440 taken 100% (fallthrough)
branch 1441 taken 0% (throw)
call   1442 returned 100%
call   1443 returned 100%
call   1444 returned 100%
call   1445 returned 100%
call   1446 never executed
call   1447 never executed
call   1448 never executed
call   1449 never executed
call   1450 returned 100%
call   1451 returned 100%
call   1452 returned 100%
call   1453 returned 100%
call   1454 returned 100%
branch 1455 taken 100% (fallthrough)
branch 1456 taken 0% (throw)
call   1457 returned 100%
call   1458 returned 100%
branch 1459 taken 100% (fallthrough)
branch 1460 taken 0%
branch 1461 taken 100% (fallthrough)
branch 1462 taken 0% (throw)
call   1463 returned 100%
call   1464 returned 100%
branch 1465 taken 100% (fallthrough)
branch 1466 taken 0% (throw)
call   1467 returned 100%
call   1468 returned 100%
call   1469 returned 100%
call   1470 returned 100%
call   1471 never executed
call   1472 never executed
call   1473 never executed
call   1474 never executed
call   1475 returned 100%
call   1476 returned 100%
call   1477 returned 100%
call   1478 returned 100%
call   1479 returned 100%
branch 1480 taken 100% (fallthrough)
branch 1481 taken 0% (throw)
call   1482 returned 100%
call   1483 returned 100%
branch 1484 taken 100% (fallthrough)
branch 1485 taken 0%
branch 1486 taken 100% (fallthrough)
branch 1487 taken 0% (throw)
call   1488 returned 100%
call   1489 returned 100%
branch 1490 taken 100% (fallthrough)
branch 1491 taken 0% (throw)
call   1492 returned 100%
call   1493 returned 100%
call   1494 returned 100%
call   1495 returned 100%
call   1496 never executed
call   1497 never executed
call   1498 never executed
call   1499 never executed
call   1500 returned 100%
call   1501 returned 100%
call   1502 returned 100%
call   1503 returned 100%
call   1504 returned 100%
branch 1505 taken 100% (fallthrough)
branch 1506 taken 0% (throw)
call   1507 returned 100%
call   1508 returned 100%
branch 1509 taken 100% (fallthrough)
branch 1510 taken 0%
branch 1511 taken 100% (fallthrough)
branch 1512 taken 0% (throw)
call   1513 returned 100%
call   1514 returned 100%
branch 1515 taken 100% (fallthrough)
branch 1516 taken 0% (throw)
call   1517 returned 100%
call   1518 returned 100%
call   1519 returned 100%
call   1520 returned 100%
call   1521 never executed
call   1522 never executed
call   1523 never executed
call   1524 never executed
call   1525 returned 100%
call   1526 returned 100%
call   1527 returned 100%
call   1528 returned 100%
call   1529 returned 100%
branch 1530 taken 100% (fallthrough)
branch 1531 taken 0% (throw)
call   1532 returned 100%
call   1533 returned 100%
branch 1534 taken 100% (fallthrough)
branch 1535 taken 0%
branch 1536 taken 100% (fallthrough)
branch 1537 taken 0% (throw)
call   1538 returned 100%
call   1539 returned 100%
branch 1540 taken 100% (fallthrough)
branch 1541 taken 0% (throw)
call   1542 returned 100%
call   1543 returned 100%
call   1544 returned 100%
call   1545 returned 100%
call   1546 never executed
call   1547 never executed
call   1548 never executed
call   1549 never executed
call   1550 returned 100%
call   1551 returned 100%
call   1552 returned 100%
call   1553 returned 100%
call   1554 returned 100%
branch 1555 taken 100% (fallthrough)
branch 1556 taken 0% (throw)
call   1557 returned 100%
call   1558 returned 100%
branch 1559 taken 100% (fallthrough)
branch 1560 taken 0%
branch 1561 taken 100% (fallthrough)
branch 1562 taken 0% (throw)
call   1563 returned 100%
call   1564 returned 100%
branch 1565 taken 100% (fallthrough)
branch 1566 taken 0% (throw)
call   1567 returned 100%
call   1568 returned 100%
call   1569 returned 100%
call   1570 returned 100%
call   1571 never executed
call   1572 never executed
call   1573 never executed
call   1574 never executed
call   1575 returned 100%
call   1576 returned 100%
call   1577 returned 100%
call   1578 returned 100%
call   1579 returned 100%
branch 1580 taken 100% (fallthrough)
branch 1581 taken 0% (throw)
call   1582 returned 100%
call   1583 returned 100%
branch 1584 taken 100% (fallthrough)
branch 1585 taken 0%
branch 1586 taken 100% (fallthrough)
branch 1587 taken 0% (throw)
call   1588 returned 100%
call   1589 returned 100%
branch 1590 taken 100% (fallthrough)
branch 1591 taken 0% (throw)
call   1592 returned 100%
call   1593 returned 100%
call   1594 returned 100%
call   1595 returned 100%
call   1596 never executed
call   1597 never executed
call   1598 never executed
call   1599 never executed
call   1600 returned 100%
call   1601 returned 100%
call   1602 returned 100%
call   1603 returned 100%
call   1604 returned 100%
branch 1605 taken 100% (fallthrough)
branch 1606 taken 0% (throw)
call   1607 returned 100%
call   1608 returned 100%
branch 1609 taken 100% (fallthrough)
branch 1610 taken 0%
branch 1611 taken 100% (fallthrough)
branch 1612 taken 0% (throw)
call   1613 returned 100%
call   1614 returned 100%
branch 1615 taken 100% (fallthrough)
branch 1616 taken 0% (throw)
call   1617 returned 100%
call   1618 returned 100%
call   1619 returned 100%
call   1620 returned 100%
call   1621 never executed
call   1622 never executed
call   1623 never executed
call   1624 never executed
call   1625 returned 100%
call   1626 returned 100%
call   1627 returned 100%
call   1628 returned 100%
call   1629 returned 100%
branch 1630 taken 100% (fallthrough)
branch 1631 taken 0% (throw)
call   1632 returned 100%
call   1633 returned 100%
branch 1634 taken 100% (fallthrough)
branch 1635 taken 0%
branch 1636 taken 100% (fallthrough)
branch 1637 taken 0% (throw)
call   1638 returned 100%
call   1639 returned 100%
branch 1640 taken 100% (fallthrough)
branch 1641 taken 0% (throw)
call   1642 returned 100%
call   1643 returned 100%
call   1644 returned 100%
call   1645 returned 100%
call   1646 never executed
call   1647 never executed
call   1648 never executed
call   1649 never executed
call   1650 returned 100%
call   1651 returned 100%
call   1652 returned 100%
call   1653 returned 100%
call   1654 returned 100%
branch 1655 taken 100% (fallthrough)
branch 1656 taken 0% (throw)
call   1657 returned 100%
call   1658 returned 100%
branch 1659 taken 100% (fallthrough)
branch 1660 taken 0%
branch 1661 taken 100% (fallthrough)
branch 1662 taken 0% (throw)
call   1663 returned 100%
call   1664 returned 100%
branch 1665 taken 100% (fallthrough)
branch 1666 taken 0% (throw)
call   1667 returned 100%
call   1668 returned 100%
call   1669 returned 100%
call   1670 returned 100%
call   1671 never executed
call   1672 never executed
call   1673 never executed
call   1674 never executed
call   1675 returned 100%
call   1676 returned 100%
call   1677 returned 100%
call   1678 returned 100%
call   1679 returned 100%
branch 1680 taken 100% (fallthrough)
branch 1681 taken 0% (throw)
call   1682 returned 100%
call   1683 returned 100%
branch 1684 taken 100% (fallthrough)
branch 1685 taken 0%
branch 1686 taken 100% (fallthrough)
branch 1687 taken 0% (throw)
call   1688 returned 100%
call   1689 returned 100%
branch 1690 taken 100% (fallthrough)
branch 1691 taken 0% (throw)
call   1692 returned 100%
call   1693 returned 100%
call   1694 returned 100%
call   1695 returned 100%
call   1696 never executed
call   1697 never executed
call   1698 never executed
call   1699 never executed
        -:  655:        String::Format("%s%s%s/%d", prefix, prefix[0] == '\0' ? "" : "/",
        -:  656:                       case_name, index).c_str(),
        -:  657:        GetPrefixUntilComma(test_names).c_str(),
        -:  658:        GetTypeName<Type>().c_str(),
        -:  659:        NULL,  // No value parameter.
        -:  660:        GetTypeId<FixtureClass>(),
        -:  661:        TestClass::SetUpTestCase,
        -:  662:        TestClass::TearDownTestCase,
        -:  663:        new TestFactoryImpl<TestClass>);
        -:  664:
        -:  665:    // Next, recurses (at compile time) with the tail of the type list.
        -:  666:    return TypeParameterizedTest<Fixture, TestSel, typename Types::Tail>
      272:  667:        ::Register(prefix, case_name, test_names, index + 1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 returned 100%
call   30 returned 100%
call   31 returned 100%
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 returned 100%
call   47 returned 100%
call   48 returned 100%
call   49 returned 100%
call   50 returned 100%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 returned 100%
call   64 returned 100%
call   65 returned 100%
call   66 returned 100%
call   67 returned 100%
        -:  668:  }
        -:  669:};
        -:  670:
        -:  671:// The base case for the compile time recursion.
        -:  672:template <GTEST_TEMPLATE_ Fixture, class TestSel>
        -:  673:class TypeParameterizedTest<Fixture, TestSel, Types0> {
        -:  674: public:
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Vertices_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Vertex_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Target_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI23TestGraph_Source_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI22TestGraph_Edges_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_4_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI21TestGraph_Edge_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI34TestGraph_Adjacent_Vertices_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI26TestGraph_Num_Edges_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI25TestGraph_Add_Edge_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI29TestGraph_Num_Vertices_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_3_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_2_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
function _ZN7testing8internal21TypeParameterizedTestI9TestGraphNS0_11TemplateSelI27TestGraph_Add_Vertex_1_TestEENS0_6Types0EE8RegisterEPKcS9_S9_i called 4 returned 100% blocks executed 100%
      136:  675:  static bool Register(const char* /*prefix*/, const char* /*case_name*/,
        -:  676:                       const char* /*test_names*/, int /*index*/) {
      136:  677:    return true;
        -:  678:  }
        -:  679:};
        -:  680:
        -:  681:// TypeParameterizedTestCase<Fixture, Tests, Types>::Register()
        -:  682:// registers *all combinations* of 'Tests' and 'Types' with Google
        -:  683:// Test.  The return value is insignificant - we just need to return
        -:  684:// something such that we can call this function in a namespace scope.
        -:  685:template <GTEST_TEMPLATE_ Fixture, typename Tests, typename Types>
        -:  686:class TypeParameterizedTestCase {
        -:  687: public:
        -:  688:  static bool Register(const char* prefix, const char* case_name,
        -:  689:                       const char* test_names) {
        -:  690:    typedef typename Tests::Head Head;
        -:  691:
        -:  692:    // First, register the first test in 'Test' for each type in 'Types'.
        -:  693:    TypeParameterizedTest<Fixture, Head, Types>::Register(
        -:  694:        prefix, case_name, test_names, 0);
        -:  695:
        -:  696:    // Next, recurses (at compile time) with the tail of the test list.
        -:  697:    return TypeParameterizedTestCase<Fixture, typename Tests::Tail, Types>
        -:  698:        ::Register(prefix, case_name, SkipComma(test_names));
        -:  699:  }
        -:  700:};
        -:  701:
        -:  702:// The base case for the compile time recursion.
        -:  703:template <GTEST_TEMPLATE_ Fixture, typename Types>
        -:  704:class TypeParameterizedTestCase<Fixture, Templates0, Types> {
        -:  705: public:
        -:  706:  static bool Register(const char* /*prefix*/, const char* /*case_name*/,
        -:  707:                       const char* /*test_names*/) {
        -:  708:    return true;
        -:  709:  }
        -:  710:};
        -:  711:
        -:  712:#endif  // GTEST_HAS_TYPED_TEST || GTEST_HAS_TYPED_TEST_P
        -:  713:
        -:  714:// Returns the current OS stack trace as a String.
        -:  715://
        -:  716:// The maximum number of stack frames to be included is specified by
        -:  717:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -:  718:// specifies the number of top frames to be skipped, which doesn't
        -:  719:// count against the number of frames to be included.
        -:  720://
        -:  721:// For example, if Foo() calls Bar(), which in turn calls
        -:  722:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -:  723:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -:  724:GTEST_API_ String GetCurrentOsStackTraceExceptTop(UnitTest* unit_test,
        -:  725:                                                  int skip_count);
        -:  726:
        -:  727:// Helpers for suppressing warnings on unreachable code or constant
        -:  728:// condition.
        -:  729:
        -:  730:// Always returns true.
        -:  731:GTEST_API_ bool AlwaysTrue();
        -:  732:
        -:  733:// Always returns false.
        -:  734:inline bool AlwaysFalse() { return !AlwaysTrue(); }
        -:  735:
        -:  736:// Helper for suppressing false warning from Clang on a const char*
        -:  737:// variable declared in a conditional expression always being NULL in
        -:  738:// the else branch.
        -:  739:struct GTEST_API_ ConstCharPtr {
        -:  740:  ConstCharPtr(const char* str) : value(str) {}
        -:  741:  operator bool() const { return true; }
        -:  742:  const char* value;
        -:  743:};
        -:  744:
        -:  745:// A simple Linear Congruential Generator for generating random
        -:  746:// numbers with a uniform distribution.  Unlike rand() and srand(), it
        -:  747:// doesn't use global state (and therefore can't interfere with user
        -:  748:// code).  Unlike rand_r(), it's portable.  An LCG isn't very random,
        -:  749:// but it's good enough for our purposes.
        -:  750:class GTEST_API_ Random {
        -:  751: public:
        -:  752:  static const UInt32 kMaxRange = 1u << 31;
        -:  753:
        -:  754:  explicit Random(UInt32 seed) : state_(seed) {}
        -:  755:
        -:  756:  void Reseed(UInt32 seed) { state_ = seed; }
        -:  757:
        -:  758:  // Generates a random number from [0, range).  Crashes if 'range' is
        -:  759:  // 0 or greater than kMaxRange.
        -:  760:  UInt32 Generate(UInt32 range);
        -:  761:
        -:  762: private:
        -:  763:  UInt32 state_;
        -:  764:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Random);
        -:  765:};
        -:  766:
        -:  767:// Defining a variable of type CompileAssertTypesEqual<T1, T2> will cause a
        -:  768:// compiler error iff T1 and T2 are different types.
        -:  769:template <typename T1, typename T2>
        -:  770:struct CompileAssertTypesEqual;
        -:  771:
        -:  772:template <typename T>
        -:  773:struct CompileAssertTypesEqual<T, T> {
        -:  774:};
        -:  775:
        -:  776:// Removes the reference from a type if it is a reference type,
        -:  777:// otherwise leaves it unchanged.  This is the same as
        -:  778:// tr1::remove_reference, which is not widely available yet.
        -:  779:template <typename T>
        -:  780:struct RemoveReference { typedef T type; };  // NOLINT
        -:  781:template <typename T>
        -:  782:struct RemoveReference<T&> { typedef T type; };  // NOLINT
        -:  783:
        -:  784:// A handy wrapper around RemoveReference that works when the argument
        -:  785:// T depends on template parameters.
        -:  786:#define GTEST_REMOVE_REFERENCE_(T) \
        -:  787:    typename ::testing::internal::RemoveReference<T>::type
        -:  788:
        -:  789:// Removes const from a type if it is a const type, otherwise leaves
        -:  790:// it unchanged.  This is the same as tr1::remove_const, which is not
        -:  791:// widely available yet.
        -:  792:template <typename T>
        -:  793:struct RemoveConst { typedef T type; };  // NOLINT
        -:  794:template <typename T>
        -:  795:struct RemoveConst<const T> { typedef T type; };  // NOLINT
        -:  796:
        -:  797:// MSVC 8.0, Sun C++, and IBM XL C++ have a bug which causes the above
        -:  798:// definition to fail to remove the const in 'const int[3]' and 'const
        -:  799:// char[3][4]'.  The following specialization works around the bug.
        -:  800:// However, it causes trouble with GCC and thus needs to be
        -:  801:// conditionally compiled.
        -:  802:#if defined(_MSC_VER) || defined(__SUNPRO_CC) || defined(__IBMCPP__)
        -:  803:template <typename T, size_t N>
        -:  804:struct RemoveConst<const T[N]> {
        -:  805:  typedef typename RemoveConst<T>::type type[N];
        -:  806:};
        -:  807:#endif
        -:  808:
        -:  809:// A handy wrapper around RemoveConst that works when the argument
        -:  810:// T depends on template parameters.
        -:  811:#define GTEST_REMOVE_CONST_(T) \
        -:  812:    typename ::testing::internal::RemoveConst<T>::type
        -:  813:
        -:  814:// Turns const U&, U&, const U, and U all into U.
        -:  815:#define GTEST_REMOVE_REFERENCE_AND_CONST_(T) \
        -:  816:    GTEST_REMOVE_CONST_(GTEST_REMOVE_REFERENCE_(T))
        -:  817:
        -:  818:// Adds reference to a type if it is not a reference type,
        -:  819:// otherwise leaves it unchanged.  This is the same as
        -:  820:// tr1::add_reference, which is not widely available yet.
        -:  821:template <typename T>
        -:  822:struct AddReference { typedef T& type; };  // NOLINT
        -:  823:template <typename T>
        -:  824:struct AddReference<T&> { typedef T& type; };  // NOLINT
        -:  825:
        -:  826:// A handy wrapper around AddReference that works when the argument T
        -:  827:// depends on template parameters.
        -:  828:#define GTEST_ADD_REFERENCE_(T) \
        -:  829:    typename ::testing::internal::AddReference<T>::type
        -:  830:
        -:  831:// Adds a reference to const on top of T as necessary.  For example,
        -:  832:// it transforms
        -:  833://
        -:  834://   char         ==> const char&
        -:  835://   const char   ==> const char&
        -:  836://   char&        ==> const char&
        -:  837://   const char&  ==> const char&
        -:  838://
        -:  839:// The argument T must depend on some template parameters.
        -:  840:#define GTEST_REFERENCE_TO_CONST_(T) \
        -:  841:    GTEST_ADD_REFERENCE_(const GTEST_REMOVE_REFERENCE_(T))
        -:  842:
        -:  843:// ImplicitlyConvertible<From, To>::value is a compile-time bool
        -:  844:// constant that's true iff type From can be implicitly converted to
        -:  845:// type To.
        -:  846:template <typename From, typename To>
        -:  847:class ImplicitlyConvertible {
        -:  848: private:
        -:  849:  // We need the following helper functions only for their types.
        -:  850:  // They have no implementations.
        -:  851:
        -:  852:  // MakeFrom() is an expression whose type is From.  We cannot simply
        -:  853:  // use From(), as the type From may not have a public default
        -:  854:  // constructor.
        -:  855:  static From MakeFrom();
        -:  856:
        -:  857:  // These two functions are overloaded.  Given an expression
        -:  858:  // Helper(x), the compiler will pick the first version if x can be
        -:  859:  // implicitly converted to type To; otherwise it will pick the
        -:  860:  // second version.
        -:  861:  //
        -:  862:  // The first version returns a value of size 1, and the second
        -:  863:  // version returns a value of size 2.  Therefore, by checking the
        -:  864:  // size of Helper(x), which can be done at compile time, we can tell
        -:  865:  // which version of Helper() is used, and hence whether x can be
        -:  866:  // implicitly converted to type To.
        -:  867:  static char Helper(To);
        -:  868:  static char (&Helper(...))[2];  // NOLINT
        -:  869:
        -:  870:  // We have to put the 'public' section after the 'private' section,
        -:  871:  // or MSVC refuses to compile the code.
        -:  872: public:
        -:  873:  // MSVC warns about implicitly converting from double to int for
        -:  874:  // possible loss of data, so we need to temporarily disable the
        -:  875:  // warning.
        -:  876:#ifdef _MSC_VER
        -:  877:# pragma warning(push)          // Saves the current warning state.
        -:  878:# pragma warning(disable:4244)  // Temporarily disables warning 4244.
        -:  879:
        -:  880:  static const bool value =
        -:  881:      sizeof(Helper(ImplicitlyConvertible::MakeFrom())) == 1;
        -:  882:# pragma warning(pop)           // Restores the warning state.
        -:  883:#elif defined(__BORLANDC__)
        -:  884:  // C++Builder cannot use member overload resolution during template
        -:  885:  // instantiation.  The simplest workaround is to use its C++0x type traits
        -:  886:  // functions (C++Builder 2009 and above only).
        -:  887:  static const bool value = __is_convertible(From, To);
        -:  888:#else
        -:  889:  static const bool value =
        -:  890:      sizeof(Helper(ImplicitlyConvertible::MakeFrom())) == 1;
        -:  891:#endif  // _MSV_VER
        -:  892:};
        -:  893:template <typename From, typename To>
        -:  894:const bool ImplicitlyConvertible<From, To>::value;
        -:  895:
        -:  896:// IsAProtocolMessage<T>::value is a compile-time bool constant that's
        -:  897:// true iff T is type ProtocolMessage, proto2::Message, or a subclass
        -:  898:// of those.
        -:  899:template <typename T>
        -:  900:struct IsAProtocolMessage
        -:  901:    : public bool_constant<
        -:  902:  ImplicitlyConvertible<const T*, const ::ProtocolMessage*>::value ||
        -:  903:  ImplicitlyConvertible<const T*, const ::proto2::Message*>::value> {
        -:  904:};
        -:  905:
        -:  906:// When the compiler sees expression IsContainerTest<C>(0), if C is an
        -:  907:// STL-style container class, the first overload of IsContainerTest
        -:  908:// will be viable (since both C::iterator* and C::const_iterator* are
        -:  909:// valid types and NULL can be implicitly converted to them).  It will
        -:  910:// be picked over the second overload as 'int' is a perfect match for
        -:  911:// the type of argument 0.  If C::iterator or C::const_iterator is not
        -:  912:// a valid type, the first overload is not viable, and the second
        -:  913:// overload will be picked.  Therefore, we can determine whether C is
        -:  914:// a container class by checking the type of IsContainerTest<C>(0).
        -:  915:// The value of the expression is insignificant.
        -:  916://
        -:  917:// Note that we look for both C::iterator and C::const_iterator.  The
        -:  918:// reason is that C++ injects the name of a class as a member of the
        -:  919:// class itself (e.g. you can refer to class iterator as either
        -:  920:// 'iterator' or 'iterator::iterator').  If we look for C::iterator
        -:  921:// only, for example, we would mistakenly think that a class named
        -:  922:// iterator is an STL container.
        -:  923://
        -:  924:// Also note that the simpler approach of overloading
        -:  925:// IsContainerTest(typename C::const_iterator*) and
        -:  926:// IsContainerTest(...) doesn't work with Visual Age C++ and Sun C++.
        -:  927:typedef int IsContainer;
        -:  928:template <class C>
        -:  929:IsContainer IsContainerTest(int /* dummy */,
        -:  930:                            typename C::iterator* /* it */ = NULL,
        -:  931:                            typename C::const_iterator* /* const_it */ = NULL) {
        -:  932:  return 0;
        -:  933:}
        -:  934:
        -:  935:typedef char IsNotContainer;
        -:  936:template <class C>
function _ZN7testing8internal15IsContainerTestIN5boost18adjacency_iteratorINS2_14adjacency_listINS2_4setSENS2_4vecSENS2_9directedSENS2_11no_propertyES8_S8_NS2_5listSEEEmNS2_6detail13out_edge_iterISt23_Rb_tree_const_iteratorINSB_4sep_ImS8_EEEmNSB_14edge_desc_implINS2_12directed_tagEmEElEElEEEEcl called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15IsContainerTestIN5boost6detail22adj_list_edge_iteratorINS2_12range_detail16integer_iteratorImEENS3_13out_edge_iterISt23_Rb_tree_const_iteratorINS3_4sep_ImNS2_11no_propertyEEEEmNS3_14edge_desc_implINS2_12directed_tagEmEElEENS2_14adjacency_listINS2_4setSENS2_4vecSENS2_9directedSESB_SB_SB_NS2_5listSEEEEEEEcl called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15IsContainerTestIN5boost12range_detail16integer_iteratorImEEEEcl called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15IsContainerTestImEEcl called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15IsContainerTestIN5Graph18adjacency_iteratorEEEcl called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15IsContainerTestIN5Graph13edge_iteratorEEEcl called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15IsContainerTestIN5Graph15vertex_iteratorEEEcl called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15IsContainerTestIiEEcl called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15IsContainerTestIN5boost6detail14edge_desc_implINS2_12directed_tagEmEEEEcl called 0 returned 0% blocks executed 0%
    #####:  937:IsNotContainer IsContainerTest(long /* dummy */) { return '\0'; }
        -:  938:
        -:  939:// EnableIf<condition>::type is void when 'Cond' is true, and
        -:  940:// undefined when 'Cond' is false.  To use SFINAE to make a function
        -:  941:// overload only apply when a particular expression is true, add
        -:  942:// "typename EnableIf<expression>::type* = 0" as the last parameter.
        -:  943:template<bool> struct EnableIf;
        -:  944:template<> struct EnableIf<true> { typedef void type; };  // NOLINT
        -:  945:
        -:  946:// Utilities for native arrays.
        -:  947:
        -:  948:// ArrayEq() compares two k-dimensional native arrays using the
        -:  949:// elements' operator==, where k can be any integer >= 0.  When k is
        -:  950:// 0, ArrayEq() degenerates into comparing a single pair of values.
        -:  951:
        -:  952:template <typename T, typename U>
        -:  953:bool ArrayEq(const T* lhs, size_t size, const U* rhs);
        -:  954:
        -:  955:// This generic version is used when k is 0.
        -:  956:template <typename T, typename U>
        -:  957:inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }
        -:  958:
        -:  959:// This overload is used when k >= 1.
        -:  960:template <typename T, typename U, size_t N>
        -:  961:inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {
        -:  962:  return internal::ArrayEq(lhs, N, rhs);
        -:  963:}
        -:  964:
        -:  965:// This helper reduces code bloat.  If we instead put its logic inside
        -:  966:// the previous ArrayEq() function, arrays with different sizes would
        -:  967:// lead to different copies of the template code.
        -:  968:template <typename T, typename U>
        -:  969:bool ArrayEq(const T* lhs, size_t size, const U* rhs) {
        -:  970:  for (size_t i = 0; i != size; i++) {
        -:  971:    if (!internal::ArrayEq(lhs[i], rhs[i]))
        -:  972:      return false;
        -:  973:  }
        -:  974:  return true;
        -:  975:}
        -:  976:
        -:  977:// Finds the first element in the iterator range [begin, end) that
        -:  978:// equals elem.  Element may be a native array type itself.
        -:  979:template <typename Iter, typename Element>
        -:  980:Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {
        -:  981:  for (Iter it = begin; it != end; ++it) {
        -:  982:    if (internal::ArrayEq(*it, elem))
        -:  983:      return it;
        -:  984:  }
        -:  985:  return end;
        -:  986:}
        -:  987:
        -:  988:// CopyArray() copies a k-dimensional native array using the elements'
        -:  989:// operator=, where k can be any integer >= 0.  When k is 0,
        -:  990:// CopyArray() degenerates into copying a single value.
        -:  991:
        -:  992:template <typename T, typename U>
        -:  993:void CopyArray(const T* from, size_t size, U* to);
        -:  994:
        -:  995:// This generic version is used when k is 0.
        -:  996:template <typename T, typename U>
        -:  997:inline void CopyArray(const T& from, U* to) { *to = from; }
        -:  998:
        -:  999:// This overload is used when k >= 1.
        -: 1000:template <typename T, typename U, size_t N>
        -: 1001:inline void CopyArray(const T(&from)[N], U(*to)[N]) {
        -: 1002:  internal::CopyArray(from, N, *to);
        -: 1003:}
        -: 1004:
        -: 1005:// This helper reduces code bloat.  If we instead put its logic inside
        -: 1006:// the previous CopyArray() function, arrays with different sizes
        -: 1007:// would lead to different copies of the template code.
        -: 1008:template <typename T, typename U>
        -: 1009:void CopyArray(const T* from, size_t size, U* to) {
        -: 1010:  for (size_t i = 0; i != size; i++) {
        -: 1011:    internal::CopyArray(from[i], to + i);
        -: 1012:  }
        -: 1013:}
        -: 1014:
        -: 1015:// The relation between an NativeArray object (see below) and the
        -: 1016:// native array it represents.
        -: 1017:enum RelationToSource {
        -: 1018:  kReference,  // The NativeArray references the native array.
        -: 1019:  kCopy        // The NativeArray makes a copy of the native array and
        -: 1020:               // owns the copy.
        -: 1021:};
        -: 1022:
        -: 1023:// Adapts a native array to a read-only STL-style container.  Instead
        -: 1024:// of the complete STL container concept, this adaptor only implements
        -: 1025:// members useful for Google Mock's container matchers.  New members
        -: 1026:// should be added as needed.  To simplify the implementation, we only
        -: 1027:// support Element being a raw type (i.e. having no top-level const or
        -: 1028:// reference modifier).  It's the client's responsibility to satisfy
        -: 1029:// this requirement.  Element can be an array type itself (hence
        -: 1030:// multi-dimensional arrays are supported).
        -: 1031:template <typename Element>
        -: 1032:class NativeArray {
        -: 1033: public:
        -: 1034:  // STL-style container typedefs.
        -: 1035:  typedef Element value_type;
        -: 1036:  typedef Element* iterator;
        -: 1037:  typedef const Element* const_iterator;
        -: 1038:
        -: 1039:  // Constructs from a native array.
        -: 1040:  NativeArray(const Element* array, size_t count, RelationToSource relation) {
        -: 1041:    Init(array, count, relation);
        -: 1042:  }
        -: 1043:
        -: 1044:  // Copy constructor.
        -: 1045:  NativeArray(const NativeArray& rhs) {
        -: 1046:    Init(rhs.array_, rhs.size_, rhs.relation_to_source_);
        -: 1047:  }
        -: 1048:
        -: 1049:  ~NativeArray() {
        -: 1050:    // Ensures that the user doesn't instantiate NativeArray with a
        -: 1051:    // const or reference type.
        -: 1052:    static_cast<void>(StaticAssertTypeEqHelper<Element,
        -: 1053:        GTEST_REMOVE_REFERENCE_AND_CONST_(Element)>());
        -: 1054:    if (relation_to_source_ == kCopy)
        -: 1055:      delete[] array_;
        -: 1056:  }
        -: 1057:
        -: 1058:  // STL-style container methods.
        -: 1059:  size_t size() const { return size_; }
        -: 1060:  const_iterator begin() const { return array_; }
        -: 1061:  const_iterator end() const { return array_ + size_; }
        -: 1062:  bool operator==(const NativeArray& rhs) const {
        -: 1063:    return size() == rhs.size() &&
        -: 1064:        ArrayEq(begin(), size(), rhs.begin());
        -: 1065:  }
        -: 1066:
        -: 1067: private:
        -: 1068:  // Initializes this object; makes a copy of the input array if
        -: 1069:  // 'relation' is kCopy.
        -: 1070:  void Init(const Element* array, size_t a_size, RelationToSource relation) {
        -: 1071:    if (relation == kReference) {
        -: 1072:      array_ = array;
        -: 1073:    } else {
        -: 1074:      Element* const copy = new Element[a_size];
        -: 1075:      CopyArray(array, a_size, copy);
        -: 1076:      array_ = copy;
        -: 1077:    }
        -: 1078:    size_ = a_size;
        -: 1079:    relation_to_source_ = relation;
        -: 1080:  }
        -: 1081:
        -: 1082:  const Element* array_;
        -: 1083:  size_t size_;
        -: 1084:  RelationToSource relation_to_source_;
        -: 1085:
        -: 1086:  GTEST_DISALLOW_ASSIGN_(NativeArray);
        -: 1087:};
        -: 1088:
        -: 1089:}  // namespace internal
        -: 1090:}  // namespace testing
        -: 1091:
        -: 1092:#define GTEST_MESSAGE_AT_(file, line, message, result_type) \
        -: 1093:  ::testing::internal::AssertHelper(result_type, file, line, message) \
        -: 1094:    = ::testing::Message()
        -: 1095:
        -: 1096:#define GTEST_MESSAGE_(message, result_type) \
        -: 1097:  GTEST_MESSAGE_AT_(__FILE__, __LINE__, message, result_type)
        -: 1098:
        -: 1099:#define GTEST_FATAL_FAILURE_(message) \
        -: 1100:  return GTEST_MESSAGE_(message, ::testing::TestPartResult::kFatalFailure)
        -: 1101:
        -: 1102:#define GTEST_NONFATAL_FAILURE_(message) \
        -: 1103:  GTEST_MESSAGE_(message, ::testing::TestPartResult::kNonFatalFailure)
        -: 1104:
        -: 1105:#define GTEST_SUCCESS_(message) \
        -: 1106:  GTEST_MESSAGE_(message, ::testing::TestPartResult::kSuccess)
        -: 1107:
        -: 1108:// Suppresses MSVC warnings 4072 (unreachable code) for the code following
        -: 1109:// statement if it returns or throws (or doesn't return or throw in some
        -: 1110:// situations).
        -: 1111:#define GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement) \
        -: 1112:  if (::testing::internal::AlwaysTrue()) { statement; }
        -: 1113:
        -: 1114:#define GTEST_TEST_THROW_(statement, expected_exception, fail) \
        -: 1115:  GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -: 1116:  if (::testing::internal::ConstCharPtr gtest_msg = "") { \
        -: 1117:    bool gtest_caught_expected = false; \
        -: 1118:    try { \
        -: 1119:      GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \
        -: 1120:    } \
        -: 1121:    catch (expected_exception const&) { \
        -: 1122:      gtest_caught_expected = true; \
        -: 1123:    } \
        -: 1124:    catch (...) { \
        -: 1125:      gtest_msg.value = \
        -: 1126:          "Expected: " #statement " throws an exception of type " \
        -: 1127:          #expected_exception ".\n  Actual: it throws a different type."; \
        -: 1128:      goto GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__); \
        -: 1129:    } \
        -: 1130:    if (!gtest_caught_expected) { \
        -: 1131:      gtest_msg.value = \
        -: 1132:          "Expected: " #statement " throws an exception of type " \
        -: 1133:          #expected_exception ".\n  Actual: it throws nothing."; \
        -: 1134:      goto GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__); \
        -: 1135:    } \
        -: 1136:  } else \
        -: 1137:    GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__): \
        -: 1138:      fail(gtest_msg.value)
        -: 1139:
        -: 1140:#define GTEST_TEST_NO_THROW_(statement, fail) \
        -: 1141:  GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -: 1142:  if (::testing::internal::AlwaysTrue()) { \
        -: 1143:    try { \
        -: 1144:      GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \
        -: 1145:    } \
        -: 1146:    catch (...) { \
        -: 1147:      goto GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__); \
        -: 1148:    } \
        -: 1149:  } else \
        -: 1150:    GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__): \
        -: 1151:      fail("Expected: " #statement " doesn't throw an exception.\n" \
        -: 1152:           "  Actual: it throws.")
        -: 1153:
        -: 1154:#define GTEST_TEST_ANY_THROW_(statement, fail) \
        -: 1155:  GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -: 1156:  if (::testing::internal::AlwaysTrue()) { \
        -: 1157:    bool gtest_caught_any = false; \
        -: 1158:    try { \
        -: 1159:      GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \
        -: 1160:    } \
        -: 1161:    catch (...) { \
        -: 1162:      gtest_caught_any = true; \
        -: 1163:    } \
        -: 1164:    if (!gtest_caught_any) { \
        -: 1165:      goto GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_, __LINE__); \
        -: 1166:    } \
        -: 1167:  } else \
        -: 1168:    GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_, __LINE__): \
        -: 1169:      fail("Expected: " #statement " throws an exception.\n" \
        -: 1170:           "  Actual: it doesn't.")
        -: 1171:
        -: 1172:
        -: 1173:// Implements Boolean test assertions such as EXPECT_TRUE. expression can be
        -: 1174:// either a boolean expression or an AssertionResult. text is a textual
        -: 1175:// represenation of expression as it was passed into the EXPECT_TRUE.
        -: 1176:#define GTEST_TEST_BOOLEAN_(expression, text, actual, expected, fail) \
        -: 1177:  GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -: 1178:  if (const ::testing::AssertionResult gtest_ar_ = \
        -: 1179:      ::testing::AssertionResult(expression)) \
        -: 1180:    ; \
        -: 1181:  else \
        -: 1182:    fail(::testing::internal::GetBoolAssertionFailureMessage(\
        -: 1183:        gtest_ar_, text, #actual, #expected).c_str())
        -: 1184:
        -: 1185:#define GTEST_TEST_NO_FATAL_FAILURE_(statement, fail) \
        -: 1186:  GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -: 1187:  if (::testing::internal::AlwaysTrue()) { \
        -: 1188:    ::testing::internal::HasNewFatalFailureHelper gtest_fatal_failure_checker; \
        -: 1189:    GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \
        -: 1190:    if (gtest_fatal_failure_checker.has_new_fatal_failure()) { \
        -: 1191:      goto GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_, __LINE__); \
        -: 1192:    } \
        -: 1193:  } else \
        -: 1194:    GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_, __LINE__): \
        -: 1195:      fail("Expected: " #statement " doesn't generate new fatal " \
        -: 1196:           "failures in the current thread.\n" \
        -: 1197:           "  Actual: it does.")
        -: 1198:
        -: 1199:// Expands to the name of the class that implements the given test.
        -: 1200:#define GTEST_TEST_CLASS_NAME_(test_case_name, test_name) \
        -: 1201:  test_case_name##_##test_name##_Test
        -: 1202:
        -: 1203:// Helper macro for defining tests.
        -: 1204:#define GTEST_TEST_(test_case_name, test_name, parent_class, parent_id)\
        -: 1205:class GTEST_TEST_CLASS_NAME_(test_case_name, test_name) : public parent_class {\
        -: 1206: public:\
        -: 1207:  GTEST_TEST_CLASS_NAME_(test_case_name, test_name)() {}\
        -: 1208: private:\
        -: 1209:  virtual void TestBody();\
        -: 1210:  static ::testing::TestInfo* const test_info_ GTEST_ATTRIBUTE_UNUSED_;\
        -: 1211:  GTEST_DISALLOW_COPY_AND_ASSIGN_(\
        -: 1212:      GTEST_TEST_CLASS_NAME_(test_case_name, test_name));\
        -: 1213:};\
        -: 1214:\
        -: 1215:::testing::TestInfo* const GTEST_TEST_CLASS_NAME_(test_case_name, test_name)\
        -: 1216:  ::test_info_ =\
        -: 1217:    ::testing::internal::MakeAndRegisterTestInfo(\
        -: 1218:        #test_case_name, #test_name, NULL, NULL, \
        -: 1219:        (parent_id), \
        -: 1220:        parent_class::SetUpTestCase, \
        -: 1221:        parent_class::TearDownTestCase, \
        -: 1222:        new ::testing::internal::TestFactoryImpl<\
        -: 1223:            GTEST_TEST_CLASS_NAME_(test_case_name, test_name)>);\
        -: 1224:void GTEST_TEST_CLASS_NAME_(test_case_name, test_name)::TestBody()
        -: 1225:
        -: 1226:#endif  // GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_
