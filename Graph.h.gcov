        -:    0:Source:Graph.h
        -:    0:Programs:1
        -:    1:// ----------------------
        -:    2:// projects/graph/Graph.h
        -:    3:// Copyright (C) 2014
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------
        -:    6:
        -:    7:#ifndef Graph_h
        -:    8:#define Graph_h
        -:    9:
        -:   10:
        -:   11:
        -:   12:// --------
        -:   13:// includes
        -:   14:// --------
        -:   15:
        -:   16:#include <cassert> // assert
        -:   17:#include <cstddef> // size_t
        -:   18:#include <utility> // make_pair, pair
        -:   19:#include <vector>  // vector
        -:   20:#include <algorithm>
        -:   21:#include <iterator>
        -:   22:#include <set>
        -:   23:#include <iostream> // cout, endl
        -:   24:
        -:   25:using namespace std;
        -:   26:using std::rel_ops::operator!=;
        -:   27:
        -:   28:// -----
        -:   29:// Graph
        -:   30:// -----
        -:   31:
function _ZN5GraphD2Ev called 136 returned 100% blocks executed 100%
      136:   32:class Graph {
call    0 returned 100%
        -:   33:    public:
        -:   34:        // --------
        -:   35:        // typedefs
        -:   36:        // --------
        -:   37:
        -:   38:        typedef int vertex_descriptor;
        -:   39:        typedef pair<vertex_descriptor, vertex_descriptor> edge_descriptor;
        -:   40:
        -:   41:
        -:   42:        typedef std::size_t vertices_size_type;
        -:   43:        typedef std::size_t edges_size_type;
        -:   44:        typedef set<edge_descriptor> edge_set;
        -:   45:
        -:   46:         // ------------
        -:   47:        // vertex_iterator class
        -:   48:        // ------------
        -:   49:        class vertex_iterator : public iterator<bidirectional_iterator_tag, vertex_descriptor>
        -:   50:        {
        -:   51:            public:
function _ZeqRKN5Graph15vertex_iteratorES2_ called 56 returned 100% blocks executed 100%
       56:   52:                friend bool operator == (const vertex_iterator& rhs, const vertex_iterator& lhs) {
       56:   53:                    return (rhs._g == lhs._g) && (rhs._i == lhs._i);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
        -:   54:                }
        -:   55:            private:
        -:   56:                Graph* _g;
        -:   57:                vertex_descriptor _i;
        -:   58:            public:
function _ZN5Graph15vertex_iteratorC2EPS_RKi called 24 returned 100% blocks executed 100%
       24:   59:                vertex_iterator(Graph* g, const vertex_descriptor& i) :
        -:   60:                    _g(g),
       24:   61:                    _i(i)
call    0 returned 100%
       24:   62:                    {}
        -:   63:
function _ZN5Graph15vertex_iteratordeEv called 44 returned 100% blocks executed 100%
       44:   64:                const vertex_descriptor& operator * () {
       44:   65:                    return _i;
        -:   66:                }
function _ZN5Graph15vertex_iteratorppEv called 44 returned 100% blocks executed 100%
       44:   67:                vertex_iterator& operator ++ () {
       44:   68:                    ++_i;
       44:   69:                    return *this;
        -:   70:                }
        -:   71:                vertex_iterator operator ++ (int) {
        -:   72:                    vertex_iterator temp = *this;
        -:   73:                    ++_i;
        -:   74:                    return temp;
        -:   75:                }
        -:   76:                vertex_iterator& operator -- () {
        -:   77:                    --_i;
        -:   78:                    return *this;
        -:   79:                }
        -:   80:                vertex_iterator operator -- (int) {
        -:   81:                    vertex_iterator temp = *this;
        -:   82:                    --_i;
        -:   83:                    return temp;
        -:   84:                }
        -:   85:
        -:   86:        };
        -:   87:
        -:   88:        // ------------
        -:   89:        // adjacency_iterator class
        -:   90:        // ------------
        -:   91:        class adjacency_iterator : public iterator<bidirectional_iterator_tag, vertex_descriptor>
        -:   92:        {
        -:   93:            public:
function _ZeqRKN5Graph18adjacency_iteratorES2_ called 44 returned 100% blocks executed 100%
       44:   94:                friend bool operator == (const adjacency_iterator& rhs, const adjacency_iterator& lhs) {
       44:   95:                    return (rhs._g == lhs._g) && (rhs._i == lhs._i);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 27% (fallthrough)
branch  4 taken 73%
        -:   96:                }
        -:   97:            private:
        -:   98:                Graph* _g;
        -:   99:                edge_set::iterator _i;
        -:  100:            public:
function _ZN5Graph18adjacency_iteratorC2EPS_RKSt23_Rb_tree_const_iteratorISt4pairIiiEE called 24 returned 100% blocks executed 100%
       24:  101:                adjacency_iterator(Graph* g, const edge_set::iterator& i) :
        -:  102:                    _g(g),
       24:  103:                    _i(i)
call    0 returned 100%
       24:  104:                    {}
        -:  105:
function _ZN5Graph18adjacency_iteratordeEv called 32 returned 100% blocks executed 100%
       32:  106:                const vertex_descriptor& operator * () {
       32:  107:                    return (*_i).second;
call    0 returned 100%
        -:  108:                }
function _ZN5Graph18adjacency_iteratorppEv called 32 returned 100% blocks executed 100%
       32:  109:                adjacency_iterator& operator ++ () {
       32:  110:                    ++_i;
call    0 returned 100%
       32:  111:                    return *this;
        -:  112:                }
        -:  113:                adjacency_iterator operator ++ (int) {
        -:  114:                    adjacency_iterator temp = *this;
        -:  115:                    ++_i;
        -:  116:                    return temp;
        -:  117:                }
        -:  118:                adjacency_iterator& operator -- () {
        -:  119:                    --_i;
        -:  120:                    return *this;
        -:  121:                }
        -:  122:                adjacency_iterator operator -- (int) {
        -:  123:                    adjacency_iterator temp = *this;
        -:  124:                    --_i;
        -:  125:                    return temp;
        -:  126:                }
        -:  127:
        -:  128:        };
        -:  129:
        -:  130:        // ------------
        -:  131:        // edge_iterator class
        -:  132:        // ------------
        -:  133:        class edge_iterator : public iterator<bidirectional_iterator_tag, edge_descriptor>
        -:  134:        {
        -:  135:            public:
function _ZeqRKN5Graph13edge_iteratorES2_ called 56 returned 100% blocks executed 100%
       56:  136:                friend bool operator == (const edge_iterator& rhs, const edge_iterator& lhs) {
       56:  137:                    return (rhs._g == lhs._g) && (rhs._i == lhs._i) && (rhs._e == lhs._e);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        -:  138:                }
        -:  139:            private:
        -:  140:
function _ZN5Graph13edge_iterator4nextEv called 96 returned 100% blocks executed 100%
       96:  141:                void next() {
       96:  142:                    if((unsigned int)_i >= _g->_g.size()) {
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 88%
       12:  143:                        _e = _g->_g[_g->_g.size()-1].end();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       84:  144:                    }else if((_e != _g->_g[_i].end())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
       44:  145:                        ++_e;
call    0 returned 100%
       44:  146:                        if((_e == _g->_g[_i].end())) next();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 64% (fallthrough)
branch  4 taken 36%
call    5 returned 100%
        -:  147:                    }else{
       40:  148:                        ++_i;
       40:  149:                        _e = _g->_g[_i].begin();
call    0 returned 100%
call    1 returned 100%
       40:  150:                        if(_g->_g[_i].empty()) next();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 60% (fallthrough)
branch  3 taken 40%
call    4 returned 100%
        -:  151:                    }
       96:  152:                }
        -:  153:
        -:  154:
        -:  155:                Graph* _g;
        -:  156:                vertex_descriptor _i;
        -:  157:                edge_set::iterator _e;
        -:  158:            public:
function _ZN5Graph13edge_iteratorC2EPS_RKiRKSt23_Rb_tree_const_iteratorISt4pairIiiEE called 24 returned 100% blocks executed 100%
       24:  159:                edge_iterator(Graph* g, const vertex_descriptor& i, const edge_set::iterator& e) :
        -:  160:                    _g(g),
        -:  161:                    _i(i),
       24:  162:                    _e(e)
call    0 returned 100%
       24:  163:                    {}
        -:  164:
function _ZN5Graph13edge_iteratordeEv called 44 returned 100% blocks executed 100%
       44:  165:                const edge_descriptor& operator * () {
       44:  166:                    return *_e;
call    0 returned 100%
        -:  167:                }
function _ZN5Graph13edge_iteratorppEv called 44 returned 100% blocks executed 100%
       44:  168:                edge_iterator& operator ++ () {
       44:  169:                    next();
call    0 returned 100%
       44:  170:                    return *this;
        -:  171:                }
        -:  172:                edge_iterator operator ++ (int) {
        -:  173:                    edge_iterator temp = *this;
        -:  174:                    next();
        -:  175:                    return temp;
        -:  176:                }
        -:  177:                edge_iterator& operator -- () {
        -:  178:                    next();
        -:  179:                    return *this;
        -:  180:                }
        -:  181:                edge_iterator operator -- (int) {
        -:  182:                    edge_iterator temp = *this;
        -:  183:                    next();
        -:  184:                    return temp;
        -:  185:                }
        -:  186:
        -:  187:        };
        -:  188:
        -:  189:    public:
        -:  190:        // --------
        -:  191:        // add_edge
        -:  192:        // --------
        -:  193:
        -:  194:        /**
        -:  195:         * <your documentation>
        -:  196:         */
function _Z8add_edgeiiR5Graph called 60224 returned 100% blocks executed 88%
    60224:  197:        friend std::pair<edge_descriptor, bool> add_edge (vertex_descriptor a, vertex_descriptor b, Graph& g) {
    60224:  198:            edge_descriptor e(a, b);
call    0 returned 100%
    60224:  199:            if(g._g[a].find(e) == g._g[a].end()){  g._g[a].insert(e); ++g._numEdges; return make_pair(e, true); }
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 10% (fallthrough)
branch  8 taken 90%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
call   14 never executed
    54012:  200:            else return make_pair(e, false);
call    0 returned 100%
        -:  201:        }
        -:  202:
        -:  203:        // ----------
        -:  204:        // add_vertex
        -:  205:        // ----------
        -:  206:
        -:  207:        /**
        -:  208:         * <your documentation>
        -:  209:         */
function _Z10add_vertexR5Graph called 24744 returned 100% blocks executed 75%
    24744:  210:        friend vertex_descriptor add_vertex (Graph& g) {
    24744:  211:            g._g.push_back(set<edge_descriptor>());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 never executed
    24744:  212:            return g._g.size()-1;
call    0 returned 100%
        -:  213:        }
        -:  214:
        -:  215:        // -----------------
        -:  216:        // adjacent_vertices
        -:  217:        // -----------------
        -:  218:
        -:  219:        /**
        -:  220:         * <your documentation>
        -:  221:         */
function _Z17adjacent_verticesiR5Graph called 12 returned 100% blocks executed 100%
       12:  222:        friend std::pair<adjacency_iterator, adjacency_iterator> adjacent_vertices (vertex_descriptor v, Graph& g) {
       12:  223:            adjacency_iterator b(&g, g._g[v].begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       12:  224:            adjacency_iterator e(&g, g._g[v].end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       12:  225:            return std::make_pair(b, e);
call    0 returned 100%
        -:  226:        }
        -:  227:
        -:  228:        // ----
        -:  229:        // edge
        -:  230:        // ----
        -:  231:
        -:  232:        /**
        -:  233:         * <your documentation>
        -:  234:         */
function _Z4edgeiiRK5Graph called 68 returned 100% blocks executed 82%
       68:  235:        friend std::pair<edge_descriptor, bool> edge (vertex_descriptor a, vertex_descriptor b, const Graph& g) {
       68:  236:            edge_descriptor e(a, b);
call    0 returned 100%
       68:  237:            return make_pair(e, g._g[a].find(e) != g._g[a].end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
        -:  238:        }
        -:  239:
        -:  240:        // -----
        -:  241:        // edges
        -:  242:        // -----
        -:  243:
        -:  244:        /**
        -:  245:         * <your documentation>
        -:  246:         */
function _Z5edgesR5Graph called 12 returned 100% blocks executed 81%
       12:  247:        friend std::pair<edge_iterator, edge_iterator> edges (Graph& g) {
       12:  248:            unsigned int i = 0;
       12:  249:            while(g._g[i].empty() && i < g._g.size()) { i++; }
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
       12:  250:            edge_iterator b(&g, i, g._g[i].begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       12:  251:            edge_iterator e(&g, g._g.size(), g._g[g._g.size()-1].end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
       12:  252:            return std::make_pair(b, e);}
call    0 returned 100%
        -:  253:
        -:  254:        // ---------
        -:  255:        // num_edges
        -:  256:        // ---------
        -:  257:
        -:  258:        /**
        -:  259:         * <your documentation>
        -:  260:         */
function _Z9num_edgesRK5Graph called 24 returned 100% blocks executed 100%
       24:  261:        friend edges_size_type num_edges (const Graph& g) {
       24:  262:            return g._numEdges;}
        -:  263:
        -:  264:        // ------------
        -:  265:        // num_vertices
        -:  266:        // ------------
        -:  267:
        -:  268:        /**
        -:  269:         * <your documentation>
        -:  270:         */
function _Z12num_verticesRK5Graph called 24 returned 100% blocks executed 100%
       24:  271:        friend vertices_size_type num_vertices (const Graph& g) {
       24:  272:            return g._g.size();}
call    0 returned 100%
        -:  273:
        -:  274:        // ------
        -:  275:        // source
        -:  276:        // ------
        -:  277:
        -:  278:        /**
        -:  279:         * <your documentation>
        -:  280:         */
function _Z6sourceSt4pairIiiERK5Graph called 40 returned 100% blocks executed 100%
       40:  281:        friend vertex_descriptor source (edge_descriptor e, const Graph& g) {
       40:  282:            return e.first;}
        -:  283:
        -:  284:        // ------
        -:  285:        // target
        -:  286:        // ------
        -:  287:
        -:  288:        /**
        -:  289:         * <your documentation>
        -:  290:         */
function _Z6targetSt4pairIiiERK5Graph called 40 returned 100% blocks executed 100%
       40:  291:        friend vertex_descriptor target (edge_descriptor e, const Graph& g) {
       40:  292:            return e.second;}
        -:  293:
        -:  294:        // ------
        -:  295:        // vertex
        -:  296:        // ------
        -:  297:
        -:  298:        /**
        -:  299:         * <your documentation>
        -:  300:         */
function _Z6vertexmRK5Graph called 428 returned 100% blocks executed 100%
      428:  301:        friend vertex_descriptor vertex (vertices_size_type i, const Graph& g) {
      428:  302:            return i;}
        -:  303:
        -:  304:        // --------
        -:  305:        // vertices
        -:  306:        // --------
        -:  307:
        -:  308:        /**
        -:  309:         * <your documentation>
        -:  310:         */
function _Z8verticesR5Graph called 12 returned 100% blocks executed 100%
       12:  311:        friend std::pair<vertex_iterator, vertex_iterator> vertices (Graph& g) {
       12:  312:            return make_pair(vertex_iterator(&g, 0), vertex_iterator(&g, g._g.size()));}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  313:
        -:  314:    private:
        -:  315:        // ----
        -:  316:        // data
        -:  317:        // ----
        -:  318:
        -:  319:        vector< edge_set > _g; // something like this
        -:  320:        edges_size_type _numEdges;
        -:  321:        // -----
        -:  322:        // valid
        -:  323:        // -----
        -:  324:
        -:  325:        /**
        -:  326:         * <your documentation>
        -:  327:         */
function _ZNK5Graph5validEv called 136 returned 100% blocks executed 100%
      136:  328:        bool valid () const {
        -:  329:            // <your code>
      136:  330:            return true;}
        -:  331:
        -:  332:    public:
        -:  333:
        -:  334:        // ------------
        -:  335:        // constructors
        -:  336:        // ------------
        -:  337:
        -:  338:        /**
        -:  339:         * <your documentation>
        -:  340:         */
function _ZN5GraphC2Ev called 136 returned 100% blocks executed 80%
      136:  341:        Graph () : _g(), _numEdges() {
call    0 returned 100%
      136:  342:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  343:
        -:  344:        // Default copy, destructor, and copy assignment
        -:  345:        // Graph  (const Graph<T>&);
        -:  346:        // ~Graph ();
        -:  347:        // Graph& operator = (const Graph&);
        -:  348:    };
        -:  349:
        -:  350:#endif // Graph_h
